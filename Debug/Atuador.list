
Atuador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f0  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080050e8  080050e8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e8  080050e8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080050f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  2000007c  0800516c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800516c  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001210a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ea  00000000  00000000  000321af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00034aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb0  00000000  00000000  00035a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019054  00000000  00000000  00036920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012514  00000000  00000000  0004f974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009079c  00000000  00000000  00061e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  000f2678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048e0 	.word	0x080048e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080048e0 	.word	0x080048e0

0800014c <handle>:
#include "interval.h"

void handle(struct Interval *interval) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (*interval->time >= interval->lastTime + interval->interval) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	681a      	ldr	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	6899      	ldr	r1, [r3, #8]
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	685b      	ldr	r3, [r3, #4]
 8000162:	440b      	add	r3, r1
 8000164:	429a      	cmp	r2, r3
 8000166:	d307      	bcc.n	8000178 <handle+0x2c>
		interval->callback();
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	4798      	blx	r3
		interval->lastTime = *interval->time;
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	609a      	str	r2, [r3, #8]
	}
}
 8000178:	bf00      	nop
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <initializeInterval>:

void initializeInterval(Interval * interval, unsigned long int *time, unsigned long int intervalTime, void (*callback)()) {
 8000180:	b480      	push	{r7}
 8000182:	b08b      	sub	sp, #44	; 0x2c
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
 800018c:	603b      	str	r3, [r7, #0]
	*interval = (Interval ) { time, intervalTime, 0, callback, handle };
 800018e:	68fb      	ldr	r3, [r7, #12]
 8000190:	68ba      	ldr	r2, [r7, #8]
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	2200      	movs	r2, #0
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	683a      	ldr	r2, [r7, #0]
 80001a4:	60da      	str	r2, [r3, #12]
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <initializeInterval+0x38>)
 80001aa:	611a      	str	r2, [r3, #16]
}
 80001ac:	bf00      	nop
 80001ae:	372c      	adds	r7, #44	; 0x2c
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	0800014d 	.word	0x0800014d

080001bc <handleResetRpm>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void handleResetRpm() {
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	if (time >= lastTimeOfPulse + 10000) {
 80001c0:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <handleResetRpm+0x24>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80001c8:	3310      	adds	r3, #16
 80001ca:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <handleResetRpm+0x28>)
 80001cc:	6812      	ldr	r2, [r2, #0]
 80001ce:	4293      	cmp	r3, r2
 80001d0:	d802      	bhi.n	80001d8 <handleResetRpm+0x1c>
		rpm = 0;
 80001d2:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <handleResetRpm+0x2c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
	}
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	2000009c 	.word	0x2000009c
 80001e4:	20000098 	.word	0x20000098
 80001e8:	200000a0 	.word	0x200000a0

080001ec <handleRpmInterval>:

void handleRpmInterval() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	if (!pulsedOnCurrentPulse) {
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <handleRpmInterval+0x5c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f083 0301 	eor.w	r3, r3, #1
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d021      	beq.n	8000242 <handleRpmInterval+0x56>
		if (rpm < 850 && rpm > 0) {
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <handleRpmInterval+0x60>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f240 3251 	movw	r2, #849	; 0x351
 8000206:	4293      	cmp	r3, r2
 8000208:	dc0e      	bgt.n	8000228 <handleRpmInterval+0x3c>
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <handleRpmInterval+0x60>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	dd0a      	ble.n	8000228 <handleRpmInterval+0x3c>
			if (timeoutBico.timedOut) {
 8000212:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <handleRpmInterval+0x64>)
 8000214:	7b1b      	ldrb	r3, [r3, #12]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d006      	beq.n	8000228 <handleRpmInterval+0x3c>
				timeoutBico.resetTimeout(&timeoutBico);
 800021a:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <handleRpmInterval+0x64>)
 800021c:	69db      	ldr	r3, [r3, #28]
 800021e:	480c      	ldr	r0, [pc, #48]	; (8000250 <handleRpmInterval+0x64>)
 8000220:	4798      	blx	r3
				pulsedOnCurrentPulse = true;
 8000222:	4b09      	ldr	r3, [pc, #36]	; (8000248 <handleRpmInterval+0x5c>)
 8000224:	2201      	movs	r2, #1
 8000226:	701a      	strb	r2, [r3, #0]
			}
		}
		if (rpm < 900 && rpm > 0) {
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <handleRpmInterval+0x60>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000230:	da07      	bge.n	8000242 <handleRpmInterval+0x56>
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <handleRpmInterval+0x60>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	dd03      	ble.n	8000242 <handleRpmInterval+0x56>
			timeoutBomba.resetTimeout(&timeoutBomba);
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <handleRpmInterval+0x68>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <handleRpmInterval+0x68>)
 8000240:	4798      	blx	r3
		}
	}
}
 8000242:	bf00      	nop
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000008 	.word	0x20000008
 800024c:	200000a0 	.word	0x200000a0
 8000250:	2000050c 	.word	0x2000050c
 8000254:	20000584 	.word	0x20000584

08000258 <handler>:

void handler() {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	RPMInterval.handle(&RPMInterval);
 800025c:	4b07      	ldr	r3, [pc, #28]	; (800027c <handler+0x24>)
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <handler+0x24>)
 8000262:	4798      	blx	r3
	timeoutBico.handleTimeout(&timeoutBico);
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <handler+0x28>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <handler+0x28>)
 800026a:	4798      	blx	r3
	interval.handle(&interval);
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <handler+0x2c>)
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <handler+0x2c>)
 8000272:	4798      	blx	r3
	handleResetRpm();
 8000274:	f7ff ffa2 	bl	80001bc <handleResetRpm>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}
 800027c:	2000052c 	.word	0x2000052c
 8000280:	2000050c 	.word	0x2000050c
 8000284:	20000570 	.word	0x20000570

08000288 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000298:	d106      	bne.n	80002a8 <HAL_TIM_PeriodElapsedCallback+0x20>
		time++;
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3301      	adds	r3, #1
 80002a0:	4a03      	ldr	r2, [pc, #12]	; (80002b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80002a2:	6013      	str	r3, [r2, #0]
		handler();
 80002a4:	f7ff ffd8 	bl	8000258 <handler>
	}
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000098 	.word	0x20000098

080002b4 <toggle>:

void toggle() {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(BICO_GPIO_Port, BICO_Pin);
 80002b8:	2101      	movs	r1, #1
 80002ba:	4802      	ldr	r0, [pc, #8]	; (80002c4 <toggle+0x10>)
 80002bc:	f001 ff6c 	bl	8002198 <HAL_GPIO_TogglePin>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010800 	.word	0x40010800

080002c8 <handlePulse>:

void handlePulse() {
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	rpm = (int) 300000 / (time - lastTimeOfPulse);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	; (80002f8 <handlePulse+0x30>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <handlePulse+0x34>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <handlePulse+0x38>)
 80002d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002dc:	461a      	mov	r2, r3
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <handlePulse+0x3c>)
 80002e0:	601a      	str	r2, [r3, #0]
	lastTimeOfPulse = time;
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <handlePulse+0x30>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <handlePulse+0x34>)
 80002e8:	6013      	str	r3, [r2, #0]
	pulsedOnCurrentPulse = false;
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <handlePulse+0x40>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000098 	.word	0x20000098
 80002fc:	2000009c 	.word	0x2000009c
 8000300:	000493e0 	.word	0x000493e0
 8000304:	200000a0 	.word	0x200000a0
 8000308:	20000008 	.word	0x20000008

0800030c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	2b08      	cmp	r3, #8
 800031a:	d102      	bne.n	8000322 <HAL_GPIO_EXTI_Callback+0x16>
		handlePulse();
 800031c:	f7ff ffd4 	bl	80002c8 <handlePulse>
	} else {
		__NOP();
	}
}
 8000320:	e000      	b.n	8000324 <HAL_GPIO_EXTI_Callback+0x18>
		__NOP();
 8000322:	bf00      	nop
}
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <onTimeOutBico>:

void onTimeOutBico() {
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BICO_GPIO_Port, BICO_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2101      	movs	r1, #1
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <onTimeOutBico+0x14>)
 8000336:	f001 ff17 	bl	8002168 <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800

08000344 <onResetBico>:

void onResetBico() {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BICO_GPIO_Port, BICO_Pin, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2101      	movs	r1, #1
 800034c:	4802      	ldr	r0, [pc, #8]	; (8000358 <onResetBico+0x14>)
 800034e:	f001 ff0b 	bl	8002168 <HAL_GPIO_WritePin>
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010800 	.word	0x40010800

0800035c <onTimeOutBomba>:

void onTimeOutBomba() {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOMBA_GPIO_Port, BOMBA_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2102      	movs	r1, #2
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <onTimeOutBomba+0x14>)
 8000366:	f001 feff 	bl	8002168 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010800 	.word	0x40010800

08000374 <onResetBomba>:

void onResetBomba() {
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOMBA_GPIO_Port, BOMBA_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2102      	movs	r1, #2
 800037c:	4802      	ldr	r0, [pc, #8]	; (8000388 <onResetBomba+0x14>)
 800037e:	f001 fef3 	bl	8002168 <HAL_GPIO_WritePin>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010800 	.word	0x40010800

0800038c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b08a      	sub	sp, #40	; 0x28
 8000390:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000392:	f001 f8b9 	bl	8001508 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000396:	f000 f8b7 	bl	8000508 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800039a:	f000 f9c9 	bl	8000730 <MX_GPIO_Init>
	MX_I2C1_Init();
 800039e:	f000 f94d 	bl	800063c <MX_I2C1_Init>
	MX_TIM2_Init();
 80003a2:	f000 f979 	bl	8000698 <MX_TIM2_Init>
	MX_ADC1_Init();
 80003a6:	f000 f90b 	bl	80005c0 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 80003aa:	4845      	ldr	r0, [pc, #276]	; (80004c0 <main+0x134>)
 80003ac:	f001 fb9e 	bl	8001aec <HAL_ADCEx_Calibration_Start>
	initializeInterval(&interval, &time, 10000, toggle);
 80003b0:	4b44      	ldr	r3, [pc, #272]	; (80004c4 <main+0x138>)
 80003b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80003b6:	4944      	ldr	r1, [pc, #272]	; (80004c8 <main+0x13c>)
 80003b8:	4844      	ldr	r0, [pc, #272]	; (80004cc <main+0x140>)
 80003ba:	f7ff fee1 	bl	8000180 <initializeInterval>
	initializeInterval(&RPMInterval, &time, 2000, handleRpmInterval);
 80003be:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <main+0x144>)
 80003c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003c4:	4940      	ldr	r1, [pc, #256]	; (80004c8 <main+0x13c>)
 80003c6:	4843      	ldr	r0, [pc, #268]	; (80004d4 <main+0x148>)
 80003c8:	f7ff feda 	bl	8000180 <initializeInterval>
	initializeTimeout(&timeoutBico, &time, 140, onTimeOutBico, onResetBico);
 80003cc:	4b42      	ldr	r3, [pc, #264]	; (80004d8 <main+0x14c>)
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	4b42      	ldr	r3, [pc, #264]	; (80004dc <main+0x150>)
 80003d2:	228c      	movs	r2, #140	; 0x8c
 80003d4:	493c      	ldr	r1, [pc, #240]	; (80004c8 <main+0x13c>)
 80003d6:	4842      	ldr	r0, [pc, #264]	; (80004e0 <main+0x154>)
 80003d8:	f001 f848 	bl	800146c <initializeTimeout>
	initializeTimeout(&timeoutBomba, &time, 5000, onTimeOutBomba, onResetBomba);
 80003dc:	4b41      	ldr	r3, [pc, #260]	; (80004e4 <main+0x158>)
 80003de:	9300      	str	r3, [sp, #0]
 80003e0:	4b41      	ldr	r3, [pc, #260]	; (80004e8 <main+0x15c>)
 80003e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80003e6:	4938      	ldr	r1, [pc, #224]	; (80004c8 <main+0x13c>)
 80003e8:	4840      	ldr	r0, [pc, #256]	; (80004ec <main+0x160>)
 80003ea:	f001 f83f 	bl	800146c <initializeTimeout>
	HAL_TIM_Base_Start_IT(&htim2);
 80003ee:	4840      	ldr	r0, [pc, #256]	; (80004f0 <main+0x164>)
 80003f0:	f003 fa60 	bl	80038b4 <HAL_TIM_Base_Start_IT>

//	uint16_t AD_RES = 0;

	SSD1306_Init();  // initialise
 80003f4:	f000 fa34 	bl	8000860 <SSD1306_Init>

	/// TESTSSSSSSSSS

	TestRectangles(1);
 80003f8:	2001      	movs	r0, #1
 80003fa:	f000 ffcd 	bl	8001398 <TestRectangles>

	HAL_Delay(500);
 80003fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000402:	f001 f8e3 	bl	80015cc <HAL_Delay>
	SSD1306_Clear();
 8000406:	f000 fe00 	bl	800100a <SSD1306_Clear>
	char buff[20] = "";
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
	int x = 0, y;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
	while (1) {
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 1);
//		AD_RES = HAL_ADC_GetValue(&hadc1);

		SSD1306_GotoXY(0, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f000 fb84 	bl	8000b30 <SSD1306_GotoXY>
		SSD1306_Puts("               ", &Font_7x10, 1);
 8000428:	2201      	movs	r2, #1
 800042a:	4932      	ldr	r1, [pc, #200]	; (80004f4 <main+0x168>)
 800042c:	4832      	ldr	r0, [pc, #200]	; (80004f8 <main+0x16c>)
 800042e:	f000 fc15 	bl	8000c5c <SSD1306_Puts>
		sprintf(buff, "RPM: %d", rpm);
 8000432:	4b32      	ldr	r3, [pc, #200]	; (80004fc <main+0x170>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	1d3b      	adds	r3, r7, #4
 8000438:	4931      	ldr	r1, [pc, #196]	; (8000500 <main+0x174>)
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fe16 	bl	800406c <siprintf>
		SSD1306_GotoXY(0, 0);
 8000440:	2100      	movs	r1, #0
 8000442:	2000      	movs	r0, #0
 8000444:	f000 fb74 	bl	8000b30 <SSD1306_GotoXY>
		SSD1306_Puts(buff, &Font_7x10, 1);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2201      	movs	r2, #1
 800044c:	4929      	ldr	r1, [pc, #164]	; (80004f4 <main+0x168>)
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fc04 	bl	8000c5c <SSD1306_Puts>

		y = 63 - (int) (rpm * 53 / 6000);
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <main+0x170>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2235      	movs	r2, #53	; 0x35
 800045a:	fb02 f303 	mul.w	r3, r2, r3
 800045e:	4a29      	ldr	r2, [pc, #164]	; (8000504 <main+0x178>)
 8000460:	fb82 1203 	smull	r1, r2, r2, r3
 8000464:	11d2      	asrs	r2, r2, #7
 8000466:	17db      	asrs	r3, r3, #31
 8000468:	1a9b      	subs	r3, r3, r2
 800046a:	333f      	adds	r3, #63	; 0x3f
 800046c:	61bb      	str	r3, [r7, #24]

		if (x <= 127) {
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	2b7f      	cmp	r3, #127	; 0x7f
 8000472:	dc0e      	bgt.n	8000492 <main+0x106>
			SSD1306_DrawLine(x, 127, x, y, 1);
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	b298      	uxth	r0, r3
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	b29a      	uxth	r2, r3
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	b29b      	uxth	r3, r3
 8000480:	2101      	movs	r1, #1
 8000482:	9100      	str	r1, [sp, #0]
 8000484:	217f      	movs	r1, #127	; 0x7f
 8000486:	f000 fc0e 	bl	8000ca6 <SSD1306_DrawLine>
			x++;
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	3301      	adds	r3, #1
 800048e:	61fb      	str	r3, [r7, #28]
 8000490:	e012      	b.n	80004b8 <main+0x12c>
		} else {
			SSD1306_DrawFilledRectangle(0, 9, 127, 63, 0);
 8000492:	2300      	movs	r3, #0
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	233f      	movs	r3, #63	; 0x3f
 8000498:	227f      	movs	r2, #127	; 0x7f
 800049a:	2109      	movs	r1, #9
 800049c:	2000      	movs	r0, #0
 800049e:	f000 fd67 	bl	8000f70 <SSD1306_DrawFilledRectangle>
			SSD1306_DrawLine(0, 127, 0, y, 1);
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	2201      	movs	r2, #1
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	2200      	movs	r2, #0
 80004ac:	217f      	movs	r1, #127	; 0x7f
 80004ae:	2000      	movs	r0, #0
 80004b0:	f000 fbf9 	bl	8000ca6 <SSD1306_DrawLine>
			x = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61fb      	str	r3, [r7, #28]
		}

		SSD1306_UpdateScreen();
 80004b8:	f000 fa96 	bl	80009e8 <SSD1306_UpdateScreen>
		SSD1306_GotoXY(0, 0);
 80004bc:	e7b0      	b.n	8000420 <main+0x94>
 80004be:	bf00      	nop
 80004c0:	20000540 	.word	0x20000540
 80004c4:	080002b5 	.word	0x080002b5
 80004c8:	20000098 	.word	0x20000098
 80004cc:	20000570 	.word	0x20000570
 80004d0:	080001ed 	.word	0x080001ed
 80004d4:	2000052c 	.word	0x2000052c
 80004d8:	08000345 	.word	0x08000345
 80004dc:	0800032d 	.word	0x0800032d
 80004e0:	2000050c 	.word	0x2000050c
 80004e4:	08000375 	.word	0x08000375
 80004e8:	0800035d 	.word	0x0800035d
 80004ec:	20000584 	.word	0x20000584
 80004f0:	200005a4 	.word	0x200005a4
 80004f4:	20000000 	.word	0x20000000
 80004f8:	080048f8 	.word	0x080048f8
 80004fc:	200000a0 	.word	0x200000a0
 8000500:	08004908 	.word	0x08004908
 8000504:	057619f1 	.word	0x057619f1

08000508 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fda0 	bl	800405c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800055a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fbc4 	bl	8002cec <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x66>
		Error_Handler();
 800056a:	f000 f973 	bl	8000854 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fe2e 	bl	80031ec <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x92>
		Error_Handler();
 8000596:	f000 f95d 	bl	8000854 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059a:	2302      	movs	r3, #2
 800059c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800059e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 ffba 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xae>
		Error_Handler();
 80005b2:	f000 f94f 	bl	8000854 <Error_Handler>
	}
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <MX_ADC1_Init+0x74>)
 80005d2:	4a19      	ldr	r2, [pc, #100]	; (8000638 <MX_ADC1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_ADC1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <MX_ADC1_Init+0x74>)
 80005de:	2200      	movs	r2, #0
 80005e0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_ADC1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_ADC1_Init+0x74>)
 80005ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005ee:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_ADC1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_ADC1_Init+0x74>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <MX_ADC1_Init+0x74>)
 80005fe:	f001 f809 	bl	8001614 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000608:	f000 f924 	bl	8000854 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000610:	2301      	movs	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <MX_ADC1_Init+0x74>)
 800061e:	f001 f8d1 	bl	80017c4 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000628:	f000 f914 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000540 	.word	0x20000540
 8000638:	40012400 	.word	0x40012400

0800063c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f001 fdbf 	bl	80021fc <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000684:	f000 f8e6 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200004b8 	.word	0x200004b8
 8000690:	40005400 	.word	0x40005400
 8000694:	00061a80 	.word	0x00061a80

08000698 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <MX_TIM2_Init+0x94>)
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 100 - 1;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_TIM2_Init+0x94>)
 80006be:	2263      	movs	r2, #99	; 0x63
 80006c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_TIM2_Init+0x94>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 72 - 1;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_TIM2_Init+0x94>)
 80006ca:	2247      	movs	r2, #71	; 0x47
 80006cc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <MX_TIM2_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_TIM2_Init+0x94>)
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <MX_TIM2_Init+0x94>)
 80006dc:	f003 f89a 	bl	8003814 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x52>
		Error_Handler();
 80006e6:	f000 f8b5 	bl	8000854 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ee:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	4619      	mov	r1, r3
 80006f6:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_TIM2_Init+0x94>)
 80006f8:	f003 fa36 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0x6e>
		Error_Handler();
 8000702:	f000 f8a7 	bl	8000854 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800070e:	463b      	mov	r3, r7
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_TIM2_Init+0x94>)
 8000714:	f003 fc08 	bl	8003f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800071e:	f000 f899 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200005a4 	.word	0x200005a4

08000730 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b3e      	ldr	r3, [pc, #248]	; (8000840 <MX_GPIO_Init+0x110>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a3d      	ldr	r2, [pc, #244]	; (8000840 <MX_GPIO_Init+0x110>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b3b      	ldr	r3, [pc, #236]	; (8000840 <MX_GPIO_Init+0x110>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4b38      	ldr	r3, [pc, #224]	; (8000840 <MX_GPIO_Init+0x110>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a37      	ldr	r2, [pc, #220]	; (8000840 <MX_GPIO_Init+0x110>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x110>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0x110>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a31      	ldr	r2, [pc, #196]	; (8000840 <MX_GPIO_Init+0x110>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <MX_GPIO_Init+0x110>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <MX_GPIO_Init+0x110>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <MX_GPIO_Init+0x110>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <MX_GPIO_Init+0x110>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(COMUM_GPIO_Port, COMUM_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007aa:	4826      	ldr	r0, [pc, #152]	; (8000844 <MX_GPIO_Init+0x114>)
 80007ac:	f001 fcdc 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, BICO_Pin | BOMBA_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2103      	movs	r1, #3
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_GPIO_Init+0x118>)
 80007b6:	f001 fcd7 	bl	8002168 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : COMUM_Pin */
	GPIO_InitStruct.Pin = COMUM_Pin;
 80007ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(COMUM_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x114>)
 80007d4:	f001 fb44 	bl	8001e60 <HAL_GPIO_Init>

	/*Configure GPIO pins : BICO_Pin BOMBA_Pin */
	GPIO_InitStruct.Pin = BICO_Pin | BOMBA_Pin;
 80007d8:	2303      	movs	r3, #3
 80007da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2302      	movs	r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_GPIO_Init+0x118>)
 80007f0:	f001 fb36 	bl	8001e60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007f4:	2308      	movs	r3, #8
 80007f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_GPIO_Init+0x11c>)
 80007fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4810      	ldr	r0, [pc, #64]	; (8000848 <MX_GPIO_Init+0x118>)
 8000808:	f001 fb2a 	bl	8001e60 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 800080c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000810:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_GPIO_Init+0x120>)
 8000814:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4619      	mov	r1, r3
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_GPIO_Init+0x118>)
 8000822:	f001 fb1d 	bl	8001e60 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2009      	movs	r0, #9
 800082c:	f001 fae1 	bl	8001df2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000830:	2009      	movs	r0, #9
 8000832:	f001 fafa 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	40011000 	.word	0x40011000
 8000848:	40010800 	.word	0x40010800
 800084c:	10210000 	.word	0x10210000
 8000850:	10110000 	.word	0x10110000

08000854 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800085c:	e7fe      	b.n	800085c <Error_Handler+0x8>
	...

08000860 <SSD1306_Init>:
				SSD1306_DrawPixel(x + i, y, color);
		}
	}
}

uint8_t SSD1306_Init(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000866:	f000 fbd9 	bl	800101c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800086a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800086e:	2201      	movs	r2, #1
 8000870:	2178      	movs	r1, #120	; 0x78
 8000872:	485b      	ldr	r0, [pc, #364]	; (80009e0 <SSD1306_Init+0x180>)
 8000874:	f001 ff04 	bl	8002680 <HAL_I2C_IsDeviceReady>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800087e:	2300      	movs	r3, #0
 8000880:	e0a9      	b.n	80009d6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000882:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000886:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000888:	e002      	b.n	8000890 <SSD1306_Init+0x30>
		p--;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3b01      	subs	r3, #1
 800088e:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1f9      	bne.n	800088a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000896:	22ae      	movs	r2, #174	; 0xae
 8000898:	2100      	movs	r1, #0
 800089a:	2078      	movs	r0, #120	; 0x78
 800089c:	f000 fc1a 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	2078      	movs	r0, #120	; 0x78
 80008a6:	f000 fc15 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80008aa:	2210      	movs	r2, #16
 80008ac:	2100      	movs	r1, #0
 80008ae:	2078      	movs	r0, #120	; 0x78
 80008b0:	f000 fc10 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80008b4:	22b0      	movs	r2, #176	; 0xb0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2078      	movs	r0, #120	; 0x78
 80008ba:	f000 fc0b 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80008be:	22c8      	movs	r2, #200	; 0xc8
 80008c0:	2100      	movs	r1, #0
 80008c2:	2078      	movs	r0, #120	; 0x78
 80008c4:	f000 fc06 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2078      	movs	r0, #120	; 0x78
 80008ce:	f000 fc01 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80008d2:	2210      	movs	r2, #16
 80008d4:	2100      	movs	r1, #0
 80008d6:	2078      	movs	r0, #120	; 0x78
 80008d8:	f000 fbfc 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80008dc:	2240      	movs	r2, #64	; 0x40
 80008de:	2100      	movs	r1, #0
 80008e0:	2078      	movs	r0, #120	; 0x78
 80008e2:	f000 fbf7 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80008e6:	2281      	movs	r2, #129	; 0x81
 80008e8:	2100      	movs	r1, #0
 80008ea:	2078      	movs	r0, #120	; 0x78
 80008ec:	f000 fbf2 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80008f0:	22ff      	movs	r2, #255	; 0xff
 80008f2:	2100      	movs	r1, #0
 80008f4:	2078      	movs	r0, #120	; 0x78
 80008f6:	f000 fbed 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008fa:	22a1      	movs	r2, #161	; 0xa1
 80008fc:	2100      	movs	r1, #0
 80008fe:	2078      	movs	r0, #120	; 0x78
 8000900:	f000 fbe8 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000904:	22a6      	movs	r2, #166	; 0xa6
 8000906:	2100      	movs	r1, #0
 8000908:	2078      	movs	r0, #120	; 0x78
 800090a:	f000 fbe3 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800090e:	22a8      	movs	r2, #168	; 0xa8
 8000910:	2100      	movs	r1, #0
 8000912:	2078      	movs	r0, #120	; 0x78
 8000914:	f000 fbde 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000918:	223f      	movs	r2, #63	; 0x3f
 800091a:	2100      	movs	r1, #0
 800091c:	2078      	movs	r0, #120	; 0x78
 800091e:	f000 fbd9 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000922:	22a4      	movs	r2, #164	; 0xa4
 8000924:	2100      	movs	r1, #0
 8000926:	2078      	movs	r0, #120	; 0x78
 8000928:	f000 fbd4 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800092c:	22d3      	movs	r2, #211	; 0xd3
 800092e:	2100      	movs	r1, #0
 8000930:	2078      	movs	r0, #120	; 0x78
 8000932:	f000 fbcf 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000936:	2200      	movs	r2, #0
 8000938:	2100      	movs	r1, #0
 800093a:	2078      	movs	r0, #120	; 0x78
 800093c:	f000 fbca 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000940:	22d5      	movs	r2, #213	; 0xd5
 8000942:	2100      	movs	r1, #0
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f000 fbc5 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800094a:	22f0      	movs	r2, #240	; 0xf0
 800094c:	2100      	movs	r1, #0
 800094e:	2078      	movs	r0, #120	; 0x78
 8000950:	f000 fbc0 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000954:	22d9      	movs	r2, #217	; 0xd9
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	; 0x78
 800095a:	f000 fbbb 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800095e:	2222      	movs	r2, #34	; 0x22
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	; 0x78
 8000964:	f000 fbb6 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000968:	22da      	movs	r2, #218	; 0xda
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	; 0x78
 800096e:	f000 fbb1 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000972:	2212      	movs	r2, #18
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	; 0x78
 8000978:	f000 fbac 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800097c:	22db      	movs	r2, #219	; 0xdb
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 fba7 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	; 0x78
 800098c:	f000 fba2 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000990:	228d      	movs	r2, #141	; 0x8d
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	; 0x78
 8000996:	f000 fb9d 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800099a:	2214      	movs	r2, #20
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 fb98 	bl	80010d4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80009a4:	22af      	movs	r2, #175	; 0xaf
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 fb93 	bl	80010d4 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80009ae:	222e      	movs	r2, #46	; 0x2e
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	; 0x78
 80009b4:	f000 fb8e 	bl	80010d4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f000 f843 	bl	8000a44 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80009be:	f000 f813 	bl	80009e8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SSD1306_Init+0x184>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SSD1306_Init+0x184>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <SSD1306_Init+0x184>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200004b8 	.word	0x200004b8
 80009e4:	200004a4 	.word	0x200004a4

080009e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e01d      	b.n	8000a30 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	3b50      	subs	r3, #80	; 0x50
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	2078      	movs	r0, #120	; 0x78
 8000a00:	f000 fb68 	bl	80010d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2078      	movs	r0, #120	; 0x78
 8000a0a:	f000 fb63 	bl	80010d4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000a0e:	2210      	movs	r2, #16
 8000a10:	2100      	movs	r1, #0
 8000a12:	2078      	movs	r0, #120	; 0x78
 8000a14:	f000 fb5e 	bl	80010d4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
				&SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	01db      	lsls	r3, r3, #7
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <SSD1306_UpdateScreen+0x58>)
 8000a1e:	441a      	add	r2, r3
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f000 fb0d 	bl	8001044 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d9de      	bls.n	80009f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000a4 	.word	0x200000a4

08000a44 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF,
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <SSD1306_Fill+0x14>
 8000a54:	2300      	movs	r3, #0
 8000a56:	e000      	b.n	8000a5a <SSD1306_Fill+0x16>
 8000a58:	23ff      	movs	r3, #255	; 0xff
 8000a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <SSD1306_Fill+0x2c>)
 8000a62:	f003 fafb 	bl	800405c <memset>
			sizeof(SSD1306_Buffer));
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000a4 	.word	0x200000a4

08000a74 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	4613      	mov	r3, r2
 8000a84:	70fb      	strb	r3, [r7, #3]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	2b7f      	cmp	r3, #127	; 0x7f
 8000a8a:	d848      	bhi.n	8000b1e <SSD1306_DrawPixel+0xaa>
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a90:	d845      	bhi.n	8000b1e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <SSD1306_DrawPixel+0xb4>)
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d006      	beq.n	8000aa8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t) !color;
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	bf0c      	ite	eq
 8000aa0:	2301      	moveq	r3, #1
 8000aa2:	2300      	movne	r3, #0
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d11a      	bne.n	8000ae4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	08db      	lsrs	r3, r3, #3
 8000ab4:	b298      	uxth	r0, r3
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	01db      	lsls	r3, r3, #7
 8000aba:	4413      	add	r3, r2
 8000abc:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <SSD1306_DrawPixel+0xb8>)
 8000abe:	5cd3      	ldrb	r3, [r2, r3]
 8000ac0:	b25a      	sxtb	r2, r3
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	f003 0307 	and.w	r3, r3, #7
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b259      	sxtb	r1, r3
 8000ad4:	88fa      	ldrh	r2, [r7, #6]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	01db      	lsls	r3, r3, #7
 8000ada:	4413      	add	r3, r2
 8000adc:	b2c9      	uxtb	r1, r1
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <SSD1306_DrawPixel+0xb8>)
 8000ae0:	54d1      	strb	r1, [r2, r3]
 8000ae2:	e01d      	b.n	8000b20 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000ae4:	88fa      	ldrh	r2, [r7, #6]
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	b298      	uxth	r0, r3
 8000aec:	4603      	mov	r3, r0
 8000aee:	01db      	lsls	r3, r3, #7
 8000af0:	4413      	add	r3, r2
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <SSD1306_DrawPixel+0xb8>)
 8000af4:	5cd3      	ldrb	r3, [r2, r3]
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	88bb      	ldrh	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	2101      	movs	r1, #1
 8000b00:	fa01 f303 	lsl.w	r3, r1, r3
 8000b04:	b25b      	sxtb	r3, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	b259      	sxtb	r1, r3
 8000b0e:	88fa      	ldrh	r2, [r7, #6]
 8000b10:	4603      	mov	r3, r0
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4413      	add	r3, r2
 8000b16:	b2c9      	uxtb	r1, r1
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <SSD1306_DrawPixel+0xb8>)
 8000b1a:	54d1      	strb	r1, [r2, r3]
 8000b1c:	e000      	b.n	8000b20 <SSD1306_DrawPixel+0xac>
		return;
 8000b1e:	bf00      	nop
	}
}
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200004a4 	.word	0x200004a4
 8000b2c:	200000a4 	.word	0x200000a4

08000b30 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	460a      	mov	r2, r1
 8000b3a:	80fb      	strh	r3, [r7, #6]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SSD1306_GotoXY+0x28>)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <SSD1306_GotoXY+0x28>)
 8000b48:	88bb      	ldrh	r3, [r7, #4]
 8000b4a:	8053      	strh	r3, [r2, #2]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200004a4 	.word	0x200004a4

08000b5c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t *Font, SSD1306_COLOR_t color) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b6c:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
	if (
 8000b78:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7a:	dc07      	bgt.n	8000b8c <SSD1306_Putc+0x30>
	SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)) {
 8000b7c:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000b7e:	885b      	ldrh	r3, [r3, #2]
 8000b80:	461a      	mov	r2, r3
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	785b      	ldrb	r3, [r3, #1]
 8000b86:	4413      	add	r3, r2
	SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b88:	2b3f      	cmp	r3, #63	; 0x3f
 8000b8a:	dd01      	ble.n	8000b90 <SSD1306_Putc+0x34>
		/* Error */
		return 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e05e      	b.n	8000c4e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e04b      	b.n	8000c2e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	3b20      	subs	r3, #32
 8000b9e:	6839      	ldr	r1, [r7, #0]
 8000ba0:	7849      	ldrb	r1, [r1, #1]
 8000ba2:	fb01 f303 	mul.w	r3, r1, r3
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	440b      	add	r3, r1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	e030      	b.n	8000c1c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d010      	beq.n	8000bec <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000bcc:	881a      	ldrh	r2, [r3, #0]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b298      	uxth	r0, r3
 8000bd6:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000bd8:	885a      	ldrh	r2, [r3, #2]
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	4413      	add	r3, r2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	79ba      	ldrb	r2, [r7, #6]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff ff45 	bl	8000a74 <SSD1306_DrawPixel>
 8000bea:	e014      	b.n	8000c16 <SSD1306_Putc+0xba>
						(SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000bee:	881a      	ldrh	r2, [r3, #0]
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	b298      	uxth	r0, r3
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000bfa:	885a      	ldrh	r2, [r3, #2]
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	b299      	uxth	r1, r3
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf0c      	ite	eq
 8000c0a:	2301      	moveq	r3, #1
 8000c0c:	2300      	movne	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	f7ff ff2f 	bl	8000a74 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d3c8      	bcc.n	8000bba <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	461a      	mov	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d3ad      	bcc.n	8000b96 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000c3c:	881a      	ldrh	r2, [r3, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	4413      	add	r3, r2
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <SSD1306_Putc+0xfc>)
 8000c4a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200004a4 	.word	0x200004a4

08000c5c <SSD1306_Puts>:

char SSD1306_Puts(char *str, FontDef_t *Font, SSD1306_COLOR_t color) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	4613      	mov	r3, r2
 8000c68:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c6a:	e012      	b.n	8000c92 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	79fa      	ldrb	r2, [r7, #7]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff71 	bl	8000b5c <SSD1306_Putc>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d002      	beq.n	8000c8c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	e008      	b.n	8000c9e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1e8      	bne.n	8000c6c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
		SSD1306_COLOR_t c) {
 8000ca6:	b590      	push	{r4, r7, lr}
 8000ca8:	b087      	sub	sp, #28
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4604      	mov	r4, r0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	80fb      	strh	r3, [r7, #6]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	80bb      	strh	r3, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc8:	d901      	bls.n	8000cce <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000cca:	237f      	movs	r3, #127	; 0x7f
 8000ccc:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000cd2:	d901      	bls.n	8000cd8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000cd4:	237f      	movs	r3, #127	; 0x7f
 8000cd6:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	2b3f      	cmp	r3, #63	; 0x3f
 8000cdc:	d901      	bls.n	8000ce2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000cde:	233f      	movs	r3, #63	; 0x3f
 8000ce0:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000ce2:	883b      	ldrh	r3, [r7, #0]
 8000ce4:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce6:	d901      	bls.n	8000cec <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000ce8:	233f      	movs	r3, #63	; 0x3f
 8000cea:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8000cec:	88fa      	ldrh	r2, [r7, #6]
 8000cee:	887b      	ldrh	r3, [r7, #2]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d205      	bcs.n	8000d00 <SSD1306_DrawLine+0x5a>
 8000cf4:	887a      	ldrh	r2, [r7, #2]
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	e004      	b.n	8000d0a <SSD1306_DrawLine+0x64>
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	887b      	ldrh	r3, [r7, #2]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8000d0c:	88ba      	ldrh	r2, [r7, #4]
 8000d0e:	883b      	ldrh	r3, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d205      	bcs.n	8000d20 <SSD1306_DrawLine+0x7a>
 8000d14:	883a      	ldrh	r2, [r7, #0]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	e004      	b.n	8000d2a <SSD1306_DrawLine+0x84>
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	883b      	ldrh	r3, [r7, #0]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8000d2c:	88fa      	ldrh	r2, [r7, #6]
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d201      	bcs.n	8000d38 <SSD1306_DrawLine+0x92>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e001      	b.n	8000d3c <SSD1306_DrawLine+0x96>
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8000d3e:	88ba      	ldrh	r2, [r7, #4]
 8000d40:	883b      	ldrh	r3, [r7, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d201      	bcs.n	8000d4a <SSD1306_DrawLine+0xa4>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e001      	b.n	8000d4e <SSD1306_DrawLine+0xa8>
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000d50:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000d54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dd06      	ble.n	8000d6a <SSD1306_DrawLine+0xc4>
 8000d5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d60:	0fda      	lsrs	r2, r3, #31
 8000d62:	4413      	add	r3, r2
 8000d64:	105b      	asrs	r3, r3, #1
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	e006      	b.n	8000d78 <SSD1306_DrawLine+0xd2>
 8000d6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d6e:	0fda      	lsrs	r2, r3, #31
 8000d70:	4413      	add	r3, r2
 8000d72:	105b      	asrs	r3, r3, #1
 8000d74:	425b      	negs	r3, r3
 8000d76:	b21b      	sxth	r3, r3
 8000d78:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000d7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d129      	bne.n	8000dd6 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000d82:	883a      	ldrh	r2, [r7, #0]
 8000d84:	88bb      	ldrh	r3, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d205      	bcs.n	8000d96 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000d8a:	883b      	ldrh	r3, [r7, #0]
 8000d8c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000d92:	893b      	ldrh	r3, [r7, #8]
 8000d94:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d205      	bcs.n	8000daa <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000da6:	893b      	ldrh	r3, [r7, #8]
 8000da8:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000daa:	88bb      	ldrh	r3, [r7, #4]
 8000dac:	82bb      	strh	r3, [r7, #20]
 8000dae:	e00c      	b.n	8000dca <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000db0:	8ab9      	ldrh	r1, [r7, #20]
 8000db2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fe5b 	bl	8000a74 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000dbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	82bb      	strh	r3, [r7, #20]
 8000dca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dce:	883b      	ldrh	r3, [r7, #0]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	dded      	ble.n	8000db0 <SSD1306_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8000dd4:	e05f      	b.n	8000e96 <SSD1306_DrawLine+0x1f0>
	}

	if (dy == 0) {
 8000dd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d129      	bne.n	8000e32 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000dde:	883a      	ldrh	r2, [r7, #0]
 8000de0:	88bb      	ldrh	r3, [r7, #4]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d205      	bcs.n	8000df2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000de6:	883b      	ldrh	r3, [r7, #0]
 8000de8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000dee:	893b      	ldrh	r3, [r7, #8]
 8000df0:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d205      	bcs.n	8000e06 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e02:	893b      	ldrh	r3, [r7, #8]
 8000e04:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	82bb      	strh	r3, [r7, #20]
 8000e0a:	e00c      	b.n	8000e26 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000e0c:	8abb      	ldrh	r3, [r7, #20]
 8000e0e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e12:	88b9      	ldrh	r1, [r7, #4]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe2d 	bl	8000a74 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000e1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	82bb      	strh	r3, [r7, #20]
 8000e26:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dded      	ble.n	8000e0c <SSD1306_DrawLine+0x166>
		}

		/* Return from function */
		return;
 8000e30:	e031      	b.n	8000e96 <SSD1306_DrawLine+0x1f0>
	}

	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000e32:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e36:	88b9      	ldrh	r1, [r7, #4]
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe1a 	bl	8000a74 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000e40:	88fa      	ldrh	r2, [r7, #6]
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d103      	bne.n	8000e50 <SSD1306_DrawLine+0x1aa>
 8000e48:	88ba      	ldrh	r2, [r7, #4]
 8000e4a:	883b      	ldrh	r3, [r7, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d021      	beq.n	8000e94 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000e50:	8afb      	ldrh	r3, [r7, #22]
 8000e52:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000e54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	dd08      	ble.n	8000e74 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000e62:	8afa      	ldrh	r2, [r7, #22]
 8000e64:	8a3b      	ldrh	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000e6c:	89fa      	ldrh	r2, [r7, #14]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	4413      	add	r3, r2
 8000e72:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8000e74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dad8      	bge.n	8000e32 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000e80:	8afa      	ldrh	r2, [r7, #22]
 8000e82:	8a7b      	ldrh	r3, [r7, #18]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000e8a:	89ba      	ldrh	r2, [r7, #12]
 8000e8c:	88bb      	ldrh	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000e92:	e7ce      	b.n	8000e32 <SSD1306_DrawLine+0x18c>
			break;
 8000e94:	bf00      	nop
		}
	}
}
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd90      	pop	{r4, r7, pc}

08000e9c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		SSD1306_COLOR_t c) {
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4623      	mov	r3, r4
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	807b      	strh	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ebe:	d853      	bhi.n	8000f68 <SSD1306_DrawRectangle+0xcc>
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec4:	d850      	bhi.n	8000f68 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000ec6:	88fa      	ldrh	r2, [r7, #6]
 8000ec8:	887b      	ldrh	r3, [r7, #2]
 8000eca:	4413      	add	r3, r2
 8000ecc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ece:	dd03      	ble.n	8000ed8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000ed6:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	883b      	ldrh	r3, [r7, #0]
 8000edc:	4413      	add	r3, r2
 8000ede:	2b3f      	cmp	r3, #63	; 0x3f
 8000ee0:	dd03      	ble.n	8000eea <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000ee2:	88bb      	ldrh	r3, [r7, #4]
 8000ee4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000ee8:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c); /* Top line */
 8000eea:	88fa      	ldrh	r2, [r7, #6]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	88bc      	ldrh	r4, [r7, #4]
 8000ef4:	88b9      	ldrh	r1, [r7, #4]
 8000ef6:	88f8      	ldrh	r0, [r7, #6]
 8000ef8:	7e3b      	ldrb	r3, [r7, #24]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	4623      	mov	r3, r4
 8000efe:	f7ff fed2 	bl	8000ca6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000f02:	88ba      	ldrh	r2, [r7, #4]
 8000f04:	883b      	ldrh	r3, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	b299      	uxth	r1, r3
 8000f0a:	88fa      	ldrh	r2, [r7, #6]
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29c      	uxth	r4, r3
 8000f12:	88ba      	ldrh	r2, [r7, #4]
 8000f14:	883b      	ldrh	r3, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	88f8      	ldrh	r0, [r7, #6]
 8000f1c:	7e3b      	ldrb	r3, [r7, #24]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4613      	mov	r3, r2
 8000f22:	4622      	mov	r2, r4
 8000f24:	f7ff febf 	bl	8000ca6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c); /* Left line */
 8000f28:	88ba      	ldrh	r2, [r7, #4]
 8000f2a:	883b      	ldrh	r3, [r7, #0]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29c      	uxth	r4, r3
 8000f30:	88fa      	ldrh	r2, [r7, #6]
 8000f32:	88b9      	ldrh	r1, [r7, #4]
 8000f34:	88f8      	ldrh	r0, [r7, #6]
 8000f36:	7e3b      	ldrb	r3, [r7, #24]
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	f7ff feb3 	bl	8000ca6 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000f40:	88fa      	ldrh	r2, [r7, #6]
 8000f42:	887b      	ldrh	r3, [r7, #2]
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	88fa      	ldrh	r2, [r7, #6]
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	b29c      	uxth	r4, r3
 8000f50:	88ba      	ldrh	r2, [r7, #4]
 8000f52:	883b      	ldrh	r3, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	88b9      	ldrh	r1, [r7, #4]
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	4622      	mov	r2, r4
 8000f62:	f7ff fea0 	bl	8000ca6 <SSD1306_DrawLine>
 8000f66:	e000      	b.n	8000f6a <SSD1306_DrawRectangle+0xce>
		return;
 8000f68:	bf00      	nop
}
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		SSD1306_COLOR_t c) {
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4604      	mov	r4, r0
 8000f78:	4608      	mov	r0, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4623      	mov	r3, r4
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	4603      	mov	r3, r0
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	2b7f      	cmp	r3, #127	; 0x7f
 8000f92:	d836      	bhi.n	8001002 <SSD1306_DrawFilledRectangle+0x92>
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	2b3f      	cmp	r3, #63	; 0x3f
 8000f98:	d833      	bhi.n	8001002 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa2:	dd03      	ble.n	8000fac <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000faa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000fac:	88ba      	ldrh	r2, [r7, #4]
 8000fae:	883b      	ldrh	r3, [r7, #0]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb4:	dd03      	ble.n	8000fbe <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000fbc:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e018      	b.n	8000ff6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b299      	uxth	r1, r3
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29c      	uxth	r4, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	88bb      	ldrh	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	88f8      	ldrh	r0, [r7, #6]
 8000fe2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	4622      	mov	r2, r4
 8000fec:	f7ff fe5b 	bl	8000ca6 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	883a      	ldrh	r2, [r7, #0]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d2e1      	bcs.n	8000fc4 <SSD1306_DrawFilledRectangle+0x54>
 8001000:	e000      	b.n	8001004 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001002:	bf00      	nop
	}
}
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <SSD1306_Clear>:
		SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
		SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
	}
}

void SSD1306_Clear(void) {
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fd18 	bl	8000a44 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001014:	f7ff fce8 	bl	80009e8 <SSD1306_UpdateScreen>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <ssd1306_I2C_Init+0x24>)
 8001024:	607b      	str	r3, [r7, #4]
	while (p > 0)
 8001026:	e002      	b.n	800102e <ssd1306_I2C_Init+0x12>
		p--;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
	while (p > 0)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1f9      	bne.n	8001028 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	0003d090 	.word	0x0003d090

08001044 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t *data,
		uint16_t count) {
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b0c7      	sub	sp, #284	; 0x11c
 8001048:	af02      	add	r7, sp, #8
 800104a:	4604      	mov	r4, r0
 800104c:	4608      	mov	r0, r1
 800104e:	4639      	mov	r1, r7
 8001050:	600a      	str	r2, [r1, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	4622      	mov	r2, r4
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	4602      	mov	r2, r0
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	460a      	mov	r2, r1
 8001064:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	1dba      	adds	r2, r7, #6
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < count; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001076:	e010      	b.n	800109a <ssd1306_I2C_WriteMulti+0x56>
		dt[i + 1] = data[i];
 8001078:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800107c:	463a      	mov	r2, r7
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	441a      	add	r2, r3
 8001082:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001086:	3301      	adds	r3, #1
 8001088:	7811      	ldrb	r1, [r2, #0]
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < count; i++)
 8001090:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001094:	3301      	adds	r3, #1
 8001096:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800109a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800109e:	b29b      	uxth	r3, r3
 80010a0:	1d3a      	adds	r2, r7, #4
 80010a2:	8812      	ldrh	r2, [r2, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8e7      	bhi.n	8001078 <ssd1306_I2C_WriteMulti+0x34>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count + 1, 10);
 80010a8:	1dfb      	adds	r3, r7, #7
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b299      	uxth	r1, r3
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	200a      	movs	r0, #10
 80010bc:	9000      	str	r0, [sp, #0]
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <ssd1306_I2C_WriteMulti+0x8c>)
 80010c0:	f001 f9e0 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 80010c4:	bf00      	nop
 80010c6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd90      	pop	{r4, r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200004b8 	.word	0x200004b8

080010d4 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	460b      	mov	r3, r1
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	4613      	mov	r3, r2
 80010e4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	b299      	uxth	r1, r3
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	230a      	movs	r3, #10
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2302      	movs	r3, #2
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <ssd1306_I2C_Write+0x38>)
 80010fe:	f001 f9c1 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200004b8 	.word	0x200004b8

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_MspInit+0x5c>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_MspInit+0x5c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_MspInit+0x5c>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_MspInit+0x5c>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_MspInit+0x5c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_MspInit+0x5c>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_MspInit+0x60>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_MspInit+0x60>)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	40021000 	.word	0x40021000
 8001170:	40010000 	.word	0x40010000

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0x6c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d121      	bne.n	80011d8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_ADC_MspInit+0x70>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011c4:	2310      	movs	r3, #16
 80011c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_ADC_MspInit+0x74>)
 80011d4:	f000 fe44 	bl	8001e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012400 	.word	0x40012400
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010800 	.word	0x40010800

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a15      	ldr	r2, [pc, #84]	; (800125c <HAL_I2C_MspInit+0x70>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d123      	bne.n	8001254 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_I2C_MspInit+0x74>)
 8001212:	f043 0308 	orr.w	r3, r3, #8
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_I2C_MspInit+0x78>)
 8001238:	f000 fe12 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_I2C_MspInit+0x74>)
 8001242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001246:	61d3      	str	r3, [r2, #28]
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_I2C_MspInit+0x74>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40005400 	.word	0x40005400
 8001260:	40021000 	.word	0x40021000
 8001264:	40010c00 	.word	0x40010c00

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f000 fdab 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f000 fdc4 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f94d 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}

080012fe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001302:	2008      	movs	r0, #8
 8001304:	f000 ff62 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <TIM2_IRQHandler+0x10>)
 8001312:	f002 fb21 	bl	8003958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200005a4 	.word	0x200005a4

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f002 fe5a 	bl	8004008 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20005000 	.word	0x20005000
 8001380:	00000400 	.word	0x00000400
 8001384:	200004ac 	.word	0x200004ac
 8001388:	20000600 	.word	0x20000600

0800138c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <TestRectangles>:
    	}
}


void TestRectangles (uint8_t color)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b087      	sub	sp, #28
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 80013a2:	f7ff fe32 	bl	800100a <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < n; i += 6)
 80013aa:	2302      	movs	r3, #2
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	e01d      	b.n	80013ec <TestRectangles+0x54>
    {
        i2 = i / 2;
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2, i, i, color);
 80013b6:	7b7b      	ldrb	r3, [r7, #13]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80013be:	b298      	uxth	r0, r3
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	f1c3 0320 	rsb	r3, r3, #32
 80013c8:	b299      	uxth	r1, r3
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	b29c      	uxth	r4, r3
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4623      	mov	r3, r4
 80013d8:	f7ff fd60 	bl	8000e9c <SSD1306_DrawRectangle>
        SSD1306_UpdateScreen();
 80013dc:	f7ff fb04 	bl	80009e8 <SSD1306_UpdateScreen>
        HAL_Delay (10);
 80013e0:	200a      	movs	r0, #10
 80013e2:	f000 f8f3 	bl	80015cc <HAL_Delay>
    for (i = 2; i < n; i += 6)
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	3306      	adds	r3, #6
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3dd      	bcc.n	80013b0 <TestRectangles+0x18>
    }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}

080013fe <handleTimeout>:
#include "timeout.h"

void handleTimeout(struct Timeout *timeout) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	if (*timeout->time >= timeout->lastTime + timeout->timeout && !timeout->timedOut) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6899      	ldr	r1, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	440b      	add	r3, r1
 8001416:	429a      	cmp	r2, r3
 8001418:	d311      	bcc.n	800143e <handleTimeout+0x40>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7b1b      	ldrb	r3, [r3, #12]
 800141e:	f083 0301 	eor.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <handleTimeout+0x40>
		timeout->onTimeout();
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4798      	blx	r3
		timeout->timedOut = true;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	731a      	strb	r2, [r3, #12]
		timeout->lastTime = *timeout->time;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <resetTimeout>:

void resetTimeout(struct Timeout *timeout){
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	timeout->onReset();
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	4798      	blx	r3
	timeout->lastTime = *timeout->time;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	609a      	str	r2, [r3, #8]
	timeout->timedOut = false;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	731a      	strb	r2, [r3, #12]
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <initializeTimeout>:

void initializeTimeout(Timeout * timeout, unsigned long int *time, unsigned long int timeoutTime, void (*onTimeout)(), void(*onReset)()) {
 800146c:	b480      	push	{r7}
 800146e:	b08d      	sub	sp, #52	; 0x34
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	603b      	str	r3, [r7, #0]
	*timeout = (Timeout ) { time, timeoutTime, 0, true, onTimeout, onReset, handleTimeout, resetTimeout };
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2201      	movs	r2, #1
 8001490:	731a      	strb	r2, [r3, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <initializeTimeout+0x48>)
 80014a2:	619a      	str	r2, [r3, #24]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <initializeTimeout+0x4c>)
 80014a8:	61da      	str	r2, [r3, #28]
}
 80014aa:	bf00      	nop
 80014ac:	3734      	adds	r7, #52	; 0x34
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	080013ff 	.word	0x080013ff
 80014b8:	08001447 	.word	0x08001447

080014bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014e2:	f7ff ff53 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e6:	f002 fd95 	bl	8004014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ea:	f7fe ff4f 	bl	800038c <main>
  bx lr
 80014ee:	4770      	bx	lr
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80014f8:	080050f0 	.word	0x080050f0
  ldr r2, =_sbss
 80014fc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001500:	20000600 	.word	0x20000600

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x28>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x28>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f000 fc5f 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fdf4 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fc77 	bl	8001e46 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f000 fc3f 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000014 	.word	0x20000014
 8001590:	20000010 	.word	0x20000010

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_IncTick+0x1c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_IncTick+0x20>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <HAL_IncTick+0x20>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	20000014 	.word	0x20000014
 80015b4:	200005ec 	.word	0x200005ec

080015b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return uwTick;
 80015bc:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <HAL_GetTick+0x10>)
 80015be:	681b      	ldr	r3, [r3, #0]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	200005ec 	.word	0x200005ec

080015cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff fff0 	bl	80015b8 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffe0 	bl	80015b8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000014 	.word	0x20000014

08001614 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0be      	b.n	80017b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fd8e 	bl	8001174 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fa05 	bl	8001a68 <ADC_ConversionStop_Disable>
 800165e:	4603      	mov	r3, r0
 8001660:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	f040 8099 	bne.w	80017a2 <HAL_ADC_Init+0x18e>
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 8095 	bne.w	80017a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	f043 0202 	orr.w	r2, r3, #2
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001694:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7b1b      	ldrb	r3, [r3, #12]
 800169a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800169c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ac:	d003      	beq.n	80016b6 <HAL_ADC_Init+0xa2>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d102      	bne.n	80016bc <HAL_ADC_Init+0xa8>
 80016b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ba:	e000      	b.n	80016be <HAL_ADC_Init+0xaa>
 80016bc:	2300      	movs	r3, #0
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7d1b      	ldrb	r3, [r3, #20]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d119      	bne.n	8001700 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7b1b      	ldrb	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d109      	bne.n	80016e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	3b01      	subs	r3, #1
 80016da:	035a      	lsls	r2, r3, #13
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e00b      	b.n	8001700 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ec:	f043 0220 	orr.w	r2, r3, #32
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	430a      	orrs	r2, r1
 8001712:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_ADC_Init+0x1a8>)
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	430b      	orrs	r3, r1
 8001726:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001730:	d003      	beq.n	800173a <HAL_ADC_Init+0x126>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d104      	bne.n	8001744 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	3b01      	subs	r3, #1
 8001740:	051b      	lsls	r3, r3, #20
 8001742:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	430a      	orrs	r2, r1
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_ADC_Init+0x1ac>)
 8001760:	4013      	ands	r3, r2
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	429a      	cmp	r2, r3
 8001766:	d10b      	bne.n	8001780 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800177e:	e018      	b.n	80017b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	f023 0312 	bic.w	r3, r3, #18
 8001788:	f043 0210 	orr.w	r2, r3, #16
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a0:	e007      	b.n	80017b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	ffe1f7fd 	.word	0xffe1f7fd
 80017c0:	ff1f0efe 	.word	0xff1f0efe

080017c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x20>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0dc      	b.n	800199e <HAL_ADC_ConfigChannel+0x1da>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b06      	cmp	r3, #6
 80017f2:	d81c      	bhi.n	800182e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b05      	subs	r3, #5
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b05      	subs	r3, #5
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e03c      	b.n	80018a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b0c      	cmp	r3, #12
 8001834:	d81c      	bhi.n	8001870 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b23      	subs	r3, #35	; 0x23
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	4019      	ands	r1, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	3b23      	subs	r3, #35	; 0x23
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
 800186e:	e01b      	b.n	80018a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	3b41      	subs	r3, #65	; 0x41
 8001882:	221f      	movs	r2, #31
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b41      	subs	r3, #65	; 0x41
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	d91c      	bls.n	80018ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68d9      	ldr	r1, [r3, #12]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	2207      	movs	r2, #7
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4019      	ands	r1, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6898      	ldr	r0, [r3, #8]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	3b1e      	subs	r3, #30
 80018dc:	fa00 f203 	lsl.w	r2, r0, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	e019      	b.n	800191e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6919      	ldr	r1, [r3, #16]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4613      	mov	r3, r2
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	4413      	add	r3, r2
 80018fa:	2207      	movs	r2, #7
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6898      	ldr	r0, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	fa00 f203 	lsl.w	r2, r0, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b10      	cmp	r3, #16
 8001924:	d003      	beq.n	800192e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800192a:	2b11      	cmp	r3, #17
 800192c:	d132      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d125      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d126      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001954:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b10      	cmp	r3, #16
 800195c:	d11a      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <HAL_ADC_ConfigChannel+0x1e8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9a      	lsrs	r2, r3, #18
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001974:	e002      	b.n	800197c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_ConfigChannel+0x1b2>
 8001982:	e007      	b.n	8001994 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40012400 	.word	0x40012400
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d040      	beq.n	8001a54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <ADC_Enable+0xac>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <ADC_Enable+0xb0>)
 80019e8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ec:	0c9b      	lsrs	r3, r3, #18
 80019ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019f0:	e002      	b.n	80019f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f9      	bne.n	80019f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019fe:	f7ff fddb 	bl	80015b8 <HAL_GetTick>
 8001a02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	e01f      	b.n	8001a46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a06:	f7ff fdd7 	bl	80015b8 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d918      	bls.n	8001a46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d011      	beq.n	8001a46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	f043 0201 	orr.w	r2, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e007      	b.n	8001a56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d1d8      	bne.n	8001a06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	431bde83 	.word	0x431bde83

08001a68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d12e      	bne.n	8001ae0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a92:	f7ff fd91 	bl	80015b8 <HAL_GetTick>
 8001a96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a98:	e01b      	b.n	8001ad2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a9a:	f7ff fd8d 	bl	80015b8 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d914      	bls.n	8001ad2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10d      	bne.n	8001ad2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f043 0210 	orr.w	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e007      	b.n	8001ae2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d0dc      	beq.n	8001a9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADCEx_Calibration_Start+0x1e>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e095      	b.n	8001c36 <HAL_ADCEx_Calibration_Start+0x14a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ffa8 	bl	8001a68 <ADC_ConversionStop_Disable>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8084 	bne.w	8001c2c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b2c:	f023 0302 	bic.w	r3, r3, #2
 8001b30:	f043 0202 	orr.w	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b38:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_ADCEx_Calibration_Start+0x154>)
 8001b3a:	681c      	ldr	r4, [r3, #0]
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f001 fda5 	bl	800368c <HAL_RCCEx_GetPeriphCLKFreq>
 8001b42:	4603      	mov	r3, r0
 8001b44:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001b48:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001b4a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ff2a 	bl	80019b4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0208 	orr.w	r2, r2, #8
 8001b6e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b70:	f7ff fd22 	bl	80015b8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b76:	e01b      	b.n	8001bb0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b78:	f7ff fd1e 	bl	80015b8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b0a      	cmp	r3, #10
 8001b84:	d914      	bls.n	8001bb0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00d      	beq.n	8001bb0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b98:	f023 0312 	bic.w	r3, r3, #18
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e042      	b.n	8001c36 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1dc      	bne.n	8001b78 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0204 	orr.w	r2, r2, #4
 8001bcc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001bce:	f7ff fcf3 	bl	80015b8 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001bd4:	e01b      	b.n	8001c0e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001bd6:	f7ff fcef 	bl	80015b8 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d914      	bls.n	8001c0e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00d      	beq.n	8001c0e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f023 0312 	bic.w	r3, r3, #18
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e013      	b.n	8001c36 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1dc      	bne.n	8001bd6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	f023 0303 	bic.w	r3, r3, #3
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd90      	pop	{r4, r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <__NVIC_EnableIRQ+0x34>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff90 	bl	8001ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff2d 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff42 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff90 	bl	8001d34 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5f 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b08b      	sub	sp, #44	; 0x2c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e72:	e169      	b.n	8002148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e74:	2201      	movs	r2, #1
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 8158 	bne.w	8002142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4a9a      	ldr	r2, [pc, #616]	; (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d05e      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a98      	ldr	r2, [pc, #608]	; (8002100 <HAL_GPIO_Init+0x2a0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d875      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ea2:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_GPIO_Init+0x2a4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d058      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ea8:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_GPIO_Init+0x2a4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d86f      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eae:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d052      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001eb4:	4a94      	ldr	r2, [pc, #592]	; (8002108 <HAL_GPIO_Init+0x2a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d869      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eba:	4a94      	ldr	r2, [pc, #592]	; (800210c <HAL_GPIO_Init+0x2ac>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04c      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ec0:	4a92      	ldr	r2, [pc, #584]	; (800210c <HAL_GPIO_Init+0x2ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d863      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ec6:	4a92      	ldr	r2, [pc, #584]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d046      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
 8001ecc:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d85d      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d82a      	bhi.n	8001f2c <HAL_GPIO_Init+0xcc>
 8001ed6:	2b12      	cmp	r3, #18
 8001ed8:	d859      	bhi.n	8001f8e <HAL_GPIO_Init+0x12e>
 8001eda:	a201      	add	r2, pc, #4	; (adr r2, 8001ee0 <HAL_GPIO_Init+0x80>)
 8001edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee0:	08001f5b 	.word	0x08001f5b
 8001ee4:	08001f35 	.word	0x08001f35
 8001ee8:	08001f47 	.word	0x08001f47
 8001eec:	08001f89 	.word	0x08001f89
 8001ef0:	08001f8f 	.word	0x08001f8f
 8001ef4:	08001f8f 	.word	0x08001f8f
 8001ef8:	08001f8f 	.word	0x08001f8f
 8001efc:	08001f8f 	.word	0x08001f8f
 8001f00:	08001f8f 	.word	0x08001f8f
 8001f04:	08001f8f 	.word	0x08001f8f
 8001f08:	08001f8f 	.word	0x08001f8f
 8001f0c:	08001f8f 	.word	0x08001f8f
 8001f10:	08001f8f 	.word	0x08001f8f
 8001f14:	08001f8f 	.word	0x08001f8f
 8001f18:	08001f8f 	.word	0x08001f8f
 8001f1c:	08001f8f 	.word	0x08001f8f
 8001f20:	08001f8f 	.word	0x08001f8f
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	4a79      	ldr	r2, [pc, #484]	; (8002114 <HAL_GPIO_Init+0x2b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f32:	e02c      	b.n	8001f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e029      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	3304      	adds	r3, #4
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e024      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e01f      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	330c      	adds	r3, #12
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e01a      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f62:	2304      	movs	r3, #4
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e013      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d105      	bne.n	8001f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	611a      	str	r2, [r3, #16]
          break;
 8001f7a:	e009      	b.n	8001f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	615a      	str	r2, [r3, #20]
          break;
 8001f86:	e003      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
          break;
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x130>
          break;
 8001f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d801      	bhi.n	8001f9a <HAL_GPIO_Init+0x13a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_Init+0x13e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2bff      	cmp	r3, #255	; 0xff
 8001fa4:	d802      	bhi.n	8001fac <HAL_GPIO_Init+0x14c>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x152>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3b08      	subs	r3, #8
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	210f      	movs	r1, #15
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80b1 	beq.w	8002142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe0:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	4a4c      	ldr	r2, [pc, #304]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6193      	str	r3, [r2, #24]
 8001fec:	4b4a      	ldr	r3, [pc, #296]	; (8002118 <HAL_GPIO_Init+0x2b8>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff8:	4a48      	ldr	r2, [pc, #288]	; (800211c <HAL_GPIO_Init+0x2bc>)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3302      	adds	r3, #2
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	220f      	movs	r2, #15
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_GPIO_Init+0x2c0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d013      	beq.n	800204c <HAL_GPIO_Init+0x1ec>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <HAL_GPIO_Init+0x2c4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00d      	beq.n	8002048 <HAL_GPIO_Init+0x1e8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	; (8002128 <HAL_GPIO_Init+0x2c8>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d007      	beq.n	8002044 <HAL_GPIO_Init+0x1e4>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	; (800212c <HAL_GPIO_Init+0x2cc>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <HAL_GPIO_Init+0x1e0>
 800203c:	2303      	movs	r3, #3
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002040:	2304      	movs	r3, #4
 8002042:	e004      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_Init+0x1ee>
 800204c:	2300      	movs	r3, #0
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205e:	492f      	ldr	r1, [pc, #188]	; (800211c <HAL_GPIO_Init+0x2bc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d006      	beq.n	8002086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	492c      	ldr	r1, [pc, #176]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002086:	4b2a      	ldr	r3, [pc, #168]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	43db      	mvns	r3, r3
 800208e:	4928      	ldr	r1, [pc, #160]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 8002090:	4013      	ands	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020a0:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4922      	ldr	r1, [pc, #136]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	491e      	ldr	r1, [pc, #120]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	4918      	ldr	r1, [pc, #96]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	4914      	ldr	r1, [pc, #80]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d021      	beq.n	8002134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60cb      	str	r3, [r1, #12]
 80020fc:	e021      	b.n	8002142 <HAL_GPIO_Init+0x2e2>
 80020fe:	bf00      	nop
 8002100:	10320000 	.word	0x10320000
 8002104:	10310000 	.word	0x10310000
 8002108:	10220000 	.word	0x10220000
 800210c:	10210000 	.word	0x10210000
 8002110:	10120000 	.word	0x10120000
 8002114:	10110000 	.word	0x10110000
 8002118:	40021000 	.word	0x40021000
 800211c:	40010000 	.word	0x40010000
 8002120:	40010800 	.word	0x40010800
 8002124:	40010c00 	.word	0x40010c00
 8002128:	40011000 	.word	0x40011000
 800212c:	40011400 	.word	0x40011400
 8002130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_GPIO_Init+0x304>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	43db      	mvns	r3, r3
 800213c:	4909      	ldr	r1, [pc, #36]	; (8002164 <HAL_GPIO_Init+0x304>)
 800213e:	4013      	ands	r3, r2
 8002140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	3301      	adds	r3, #1
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	f47f ae8e 	bne.w	8001e74 <HAL_GPIO_Init+0x14>
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	372c      	adds	r7, #44	; 0x2c
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr
 8002164:	40010400 	.word	0x40010400

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	43d9      	mvns	r1, r3
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	400b      	ands	r3, r1
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f88e 	bl	800030c <HAL_GPIO_EXTI_Callback>
  }
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e12b      	b.n	8002466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe ffe2 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002260:	f001 f918 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8002264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a81      	ldr	r2, [pc, #516]	; (8002470 <HAL_I2C_Init+0x274>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d807      	bhi.n	8002280 <HAL_I2C_Init+0x84>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4a80      	ldr	r2, [pc, #512]	; (8002474 <HAL_I2C_Init+0x278>)
 8002274:	4293      	cmp	r3, r2
 8002276:	bf94      	ite	ls
 8002278:	2301      	movls	r3, #1
 800227a:	2300      	movhi	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e006      	b.n	800228e <HAL_I2C_Init+0x92>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a7d      	ldr	r2, [pc, #500]	; (8002478 <HAL_I2C_Init+0x27c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	bf94      	ite	ls
 8002288:	2301      	movls	r3, #1
 800228a:	2300      	movhi	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0e7      	b.n	8002466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4a78      	ldr	r2, [pc, #480]	; (800247c <HAL_I2C_Init+0x280>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a6a      	ldr	r2, [pc, #424]	; (8002470 <HAL_I2C_Init+0x274>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d802      	bhi.n	80022d0 <HAL_I2C_Init+0xd4>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	e009      	b.n	80022e4 <HAL_I2C_Init+0xe8>
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a69      	ldr	r2, [pc, #420]	; (8002480 <HAL_I2C_Init+0x284>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	3301      	adds	r3, #1
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	495c      	ldr	r1, [pc, #368]	; (8002470 <HAL_I2C_Init+0x274>)
 8002300:	428b      	cmp	r3, r1
 8002302:	d819      	bhi.n	8002338 <HAL_I2C_Init+0x13c>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002318:	400b      	ands	r3, r1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_I2C_Init+0x138>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb1 f3f3 	udiv	r3, r1, r3
 800232c:	3301      	adds	r3, #1
 800232e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002332:	e051      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002334:	2304      	movs	r3, #4
 8002336:	e04f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d111      	bne.n	8002364 <HAL_I2C_Init+0x168>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1e58      	subs	r0, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e012      	b.n	800238a <HAL_I2C_Init+0x18e>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e58      	subs	r0, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	0099      	lsls	r1, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	fbb0 f3f3 	udiv	r3, r0, r3
 800237a:	3301      	adds	r3, #1
 800237c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf0c      	ite	eq
 8002384:	2301      	moveq	r3, #1
 8002386:	2300      	movne	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Init+0x196>
 800238e:	2301      	movs	r3, #1
 8002390:	e022      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10e      	bne.n	80023b8 <HAL_I2C_Init+0x1bc>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1e58      	subs	r0, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	440b      	add	r3, r1
 80023a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b6:	e00f      	b.n	80023d8 <HAL_I2C_Init+0x1dc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e58      	subs	r0, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	0099      	lsls	r1, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	6809      	ldr	r1, [r1, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002406:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6911      	ldr	r1, [r2, #16]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	4311      	orrs	r1, r2
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	000186a0 	.word	0x000186a0
 8002474:	001e847f 	.word	0x001e847f
 8002478:	003d08ff 	.word	0x003d08ff
 800247c:	431bde83 	.word	0x431bde83
 8002480:	10624dd3 	.word	0x10624dd3

08002484 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
 8002494:	4613      	mov	r3, r2
 8002496:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff f88e 	bl	80015b8 <HAL_GetTick>
 800249c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	f040 80e0 	bne.w	800266c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2319      	movs	r3, #25
 80024b2:	2201      	movs	r2, #1
 80024b4:	4970      	ldr	r1, [pc, #448]	; (8002678 <HAL_I2C_Master_Transmit+0x1f4>)
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fa92 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	e0d3      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_I2C_Master_Transmit+0x50>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e0cc      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d007      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002508:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	; 0x21
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2210      	movs	r2, #16
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	893a      	ldrh	r2, [r7, #8]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a50      	ldr	r2, [pc, #320]	; (800267c <HAL_I2C_Master_Transmit+0x1f8>)
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f9ca 	bl	80028dc <I2C_MasterRequestWrite>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08d      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002568:	e066      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6a39      	ldr	r1, [r7, #32]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb0c 	bl	8002b8c <I2C_WaitOnTXEFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00d      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	2b04      	cmp	r3, #4
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002590:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e06b      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d11b      	bne.n	800260c <HAL_I2C_Master_Transmit+0x188>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	6a39      	ldr	r1, [r7, #32]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 fafc 	bl	8002c0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	2b04      	cmp	r3, #4
 8002622:	d107      	bne.n	8002634 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002632:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e01a      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d194      	bne.n	800256a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	00100002 	.word	0x00100002
 800267c:	ffff0000 	.word	0xffff0000

08002680 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	460b      	mov	r3, r1
 800268e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002690:	f7fe ff92 	bl	80015b8 <HAL_GetTick>
 8002694:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	f040 8111 	bne.w	80028ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2319      	movs	r3, #25
 80026ae:	2201      	movs	r2, #1
 80026b0:	4988      	ldr	r1, [pc, #544]	; (80028d4 <HAL_I2C_IsDeviceReady+0x254>)
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f994 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	e104      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_I2C_IsDeviceReady+0x50>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e0fd      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d007      	beq.n	80026f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2224      	movs	r2, #36	; 0x24
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a70      	ldr	r2, [pc, #448]	; (80028d8 <HAL_I2C_IsDeviceReady+0x258>)
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f952 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002750:	d103      	bne.n	800275a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0b6      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800276c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800276e:	f7fe ff23 	bl	80015b8 <HAL_GetTick>
 8002772:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	bf0c      	ite	eq
 800279a:	2301      	moveq	r3, #1
 800279c:	2300      	movne	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027a2:	e025      	b.n	80027f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7fe ff08 	bl	80015b8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <HAL_I2C_IsDeviceReady+0x13a>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	22a0      	movs	r2, #160	; 0xa0
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2ba0      	cmp	r3, #160	; 0xa0
 80027fa:	d005      	beq.n	8002808 <HAL_I2C_IsDeviceReady+0x188>
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <HAL_I2C_IsDeviceReady+0x188>
 8002802:	7dbb      	ldrb	r3, [r7, #22]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0cd      	beq.n	80027a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b02      	cmp	r3, #2
 800281c:	d129      	bne.n	8002872 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800282c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2319      	movs	r3, #25
 800284a:	2201      	movs	r2, #1
 800284c:	4921      	ldr	r1, [pc, #132]	; (80028d4 <HAL_I2C_IsDeviceReady+0x254>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f8c6 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e036      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e02c      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002880:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800288a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2319      	movs	r3, #25
 8002892:	2201      	movs	r2, #1
 8002894:	490f      	ldr	r1, [pc, #60]	; (80028d4 <HAL_I2C_IsDeviceReady+0x254>)
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f8a2 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e012      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	f4ff af32 	bcc.w	800271a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d006      	beq.n	8002906 <I2C_MasterRequestWrite+0x2a>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d003      	beq.n	8002906 <I2C_MasterRequestWrite+0x2a>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002904:	d108      	bne.n	8002918 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00b      	b.n	8002930 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	2b12      	cmp	r3, #18
 800291e:	d107      	bne.n	8002930 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800292e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f84f 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d103      	bne.n	8002960 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e035      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800296c:	d108      	bne.n	8002980 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	e01b      	b.n	80029b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	11db      	asrs	r3, r3, #7
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0306 	and.w	r3, r3, #6
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f063 030f 	orn	r3, r3, #15
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <I2C_MasterRequestWrite+0xfc>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f875 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e010      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <I2C_MasterRequestWrite+0x100>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f865 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010008 	.word	0x00010008
 80029dc:	00010002 	.word	0x00010002

080029e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f0:	e025      	b.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7fe fddd 	bl	80015b8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e023      	b.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10d      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	e00c      	b.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d0b6      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9c:	e051      	b.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d123      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e046      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d021      	beq.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fe fd5b 	bl	80015b8 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e020      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10c      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e00b      	b.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d18d      	bne.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f878 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02d      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d021      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7fe fd01 	bl	80015b8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e007      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d1ca      	bne.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1a:	e02d      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f837 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02d      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d021      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7fe fcc0 	bl	80015b8 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d1ca      	bne.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d11b      	bne.n	8002ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e26c      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
 8002d24:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d06c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x12c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e246      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x76>
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7f      	ldr	r2, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbc>
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fbf6 	bl	80015b8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fbf2 	bl	80015b8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1fa      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe4>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe fbe2 	bl	80015b8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fbde 	bl	80015b8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1e6      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x10c>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1ba      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fb97 	bl	80015b8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fb93 	bl	80015b8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e19b      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4927      	ldr	r1, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fb76 	bl	80015b8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fb72 	bl	80015b8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e17a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7fe fb56 	bl	80015b8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7fe fb52 	bl	80015b8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e15a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 fad8 	bl	80034e4 <RCC_Delay>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe fb3c 	bl	80015b8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe fb38 	bl	80015b8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e140      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	42420000 	.word	0x42420000
 8002f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b9e      	ldr	r3, [pc, #632]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a93      	ldr	r2, [pc, #588]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b91      	ldr	r3, [pc, #580]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe faf9 	bl	80015b8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe faf5 	bl	80015b8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0fd      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x356>
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a6c      	ldr	r2, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a69      	ldr	r2, [pc, #420]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7fe faa9 	bl	80015b8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe faa5 	bl	80015b8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0ab      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x37e>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fa93 	bl	80015b8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fa8f 	bl	80015b8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e095      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8081 	beq.w	80031d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d061      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d146      	bne.n	8003176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fe fa63 	bl	80015b8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7fe fa5f 	bl	80015b8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e067      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	492d      	ldr	r1, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a19      	ldr	r1, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	4927      	ldr	r1, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fa33 	bl	80015b8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7fe fa2f 	bl	80015b8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e037      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
 8003174:	e02f      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe fa1c 	bl	80015b8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7fe fa18 	bl	80015b8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e020      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x498>
 80031a2:	e018      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e013      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420060 	.word	0x42420060

080031ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0d0      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4965      	ldr	r1, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800326a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d040      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e073      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4936      	ldr	r1, [pc, #216]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fe f96c 	bl	80015b8 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe f968 	bl	80015b8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e053      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1d0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe f8ca 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	0800509c 	.word	0x0800509c
 80033b8:	2000000c 	.word	0x2000000c
 80033bc:	20000010 	.word	0x20000010

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b490      	push	{r4, r7}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c8:	1d3c      	adds	r4, r7, #4
 80033ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d0:	f240 2301 	movw	r3, #513	; 0x201
 80033d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x46>
 80033fe:	e02d      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e02d      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003412:	4413      	add	r3, r2
 8003414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003424:	4b13      	ldr	r3, [pc, #76]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c5b      	lsrs	r3, r3, #17
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003432:	4413      	add	r3, r2
 8003434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800343e:	fb02 f203 	mul.w	r2, r2, r3
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e004      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a0b      	ldr	r2, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	623b      	str	r3, [r7, #32]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345e:	623b      	str	r3, [r7, #32]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6a3b      	ldr	r3, [r7, #32]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc90      	pop	{r4, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	08004910 	.word	0x08004910
 8003474:	40021000 	.word	0x40021000
 8003478:	007a1200 	.word	0x007a1200
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003484:	4b02      	ldr	r3, [pc, #8]	; (8003490 <HAL_RCC_GetHCLKFreq+0x10>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	2000000c 	.word	0x2000000c

08003494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003498:	f7ff fff2 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4903      	ldr	r1, [pc, #12]	; (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000
 80034b8:	080050ac 	.word	0x080050ac

080034bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034c0:	f7ff ffde 	bl	8003480 <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	0adb      	lsrs	r3, r3, #11
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	4903      	ldr	r1, [pc, #12]	; (80034e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034d2:	5ccb      	ldrb	r3, [r1, r3]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	080050ac 	.word	0x080050ac

080034e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <RCC_Delay+0x34>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0a      	ldr	r2, [pc, #40]	; (800351c <RCC_Delay+0x38>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0a5b      	lsrs	r3, r3, #9
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	fb02 f303 	mul.w	r3, r2, r3
 80034fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003500:	bf00      	nop
  }
  while (Delay --);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e5a      	subs	r2, r3, #1
 8003506:	60fa      	str	r2, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f9      	bne.n	8003500 <RCC_Delay+0x1c>
}
 800350c:	bf00      	nop
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bc80      	pop	{r7}
 8003516:	4770      	bx	lr
 8003518:	2000000c 	.word	0x2000000c
 800351c:	10624dd3 	.word	0x10624dd3

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d07d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800353c:	2300      	movs	r3, #0
 800353e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003540:	4b4f      	ldr	r3, [pc, #316]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10d      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	4a4b      	ldr	r2, [pc, #300]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	61d3      	str	r3, [r2, #28]
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003568:	4b46      	ldr	r3, [pc, #280]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d118      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a42      	ldr	r2, [pc, #264]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003580:	f7fe f81a 	bl	80015b8 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	e008      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003588:	f7fe f816 	bl	80015b8 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e06d      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359a:	4b3a      	ldr	r3, [pc, #232]	; (8003684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02e      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d027      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035c4:	4b2e      	ldr	r3, [pc, #184]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035da:	4a29      	ldr	r2, [pc, #164]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d014      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ea:	f7fd ffe5 	bl	80015b8 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f2:	f7fd ffe1 	bl	80015b8 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003600:	4293      	cmp	r3, r2
 8003602:	d901      	bls.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e036      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ee      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003614:	4b1a      	ldr	r3, [pc, #104]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4917      	ldr	r1, [pc, #92]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003622:	4313      	orrs	r3, r2
 8003624:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003636:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003644:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	490b      	ldr	r1, [pc, #44]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4904      	ldr	r1, [pc, #16]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	42420440 	.word	0x42420440

0800368c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08d      	sub	sp, #52	; 0x34
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003696:	f107 040c 	add.w	r4, r7, #12
 800369a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800369c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80036a0:	f240 2301 	movw	r3, #513	; 0x201
 80036a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	2300      	movs	r3, #0
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	2300      	movs	r3, #0
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b10      	cmp	r3, #16
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	f200 8091 	bhi.w	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d04c      	beq.n	8003768 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d07c      	beq.n	80037ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80036d4:	e089      	b.n	80037ea <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80036d6:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80036dc:	4b49      	ldr	r3, [pc, #292]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8082 	beq.w	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	0c9b      	lsrs	r3, r3, #18
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80036f6:	4413      	add	r3, r2
 80036f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80036fc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d018      	beq.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003708:	4b3e      	ldr	r3, [pc, #248]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c5b      	lsrs	r3, r3, #17
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003716:	4413      	add	r3, r2
 8003718:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003728:	4a37      	ldr	r2, [pc, #220]	; (8003808 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003738:	e004      	b.n	8003744 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	4a33      	ldr	r2, [pc, #204]	; (800380c <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d102      	bne.n	8003758 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003756:	e04a      	b.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003766:	e042      	b.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003768:	4b26      	ldr	r3, [pc, #152]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d108      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003788:	62bb      	str	r3, [r7, #40]	; 0x28
 800378a:	e01f      	b.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d109      	bne.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80037a4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037aa:	e00f      	b.n	80037cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b6:	d11c      	bne.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d016      	beq.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80037c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037ca:	e012      	b.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80037cc:	e011      	b.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80037ce:	f7ff fe75 	bl	80034bc <HAL_RCC_GetPCLK2Freq>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0b9b      	lsrs	r3, r3, #14
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	3301      	adds	r3, #1
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80037e8:	e004      	b.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80037f2:	bf00      	nop
    }
  }
  return (frequency);
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3734      	adds	r7, #52	; 0x34
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	08004920 	.word	0x08004920
 8003804:	40021000 	.word	0x40021000
 8003808:	007a1200 	.word	0x007a1200
 800380c:	003d0900 	.word	0x003d0900
 8003810:	aaaaaaab 	.word	0xaaaaaaab

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd fd14 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fa70 	bl	8003d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e03a      	b.n	8003942 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIM_Base_Start_IT+0x98>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d009      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a14      	ldr	r2, [pc, #80]	; (8003950 <HAL_TIM_Base_Start_IT+0x9c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIM_Base_Start_IT+0x58>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_TIM_Base_Start_IT+0xa0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d111      	bne.n	8003930 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d010      	beq.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	e007      	b.n	8003940 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800

08003958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0202 	mvn.w	r2, #2
 8003984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9b1 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9a4 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f9b3 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0204 	mvn.w	r2, #4
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f987 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f97a 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f989 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0208 	mvn.w	r2, #8
 8003a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2204      	movs	r2, #4
 8003a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f95d 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f950 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f95f 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0210 	mvn.w	r2, #16
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2208      	movs	r2, #8
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f933 	bl	8003d02 <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f926 	bl	8003cf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f935 	bl	8003d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fbd6 	bl	8000288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b80      	cmp	r3, #128	; 0x80
 8003ae8:	d10e      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af4:	2b80      	cmp	r3, #128	; 0x80
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fa77 	bl	8003ff6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b40      	cmp	r3, #64	; 0x40
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f8f9 	bl	8003d26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0220 	mvn.w	r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fa42 	bl	8003fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_ConfigClockSource+0x18>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e0b3      	b.n	8003ce8 <HAL_TIM_ConfigClockSource+0x180>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d03e      	beq.n	8003c38 <HAL_TIM_ConfigClockSource+0xd0>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	f200 8087 	bhi.w	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	f000 8085 	beq.w	8003cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d87f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d01a      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0xa2>
 8003bd4:	2b70      	cmp	r3, #112	; 0x70
 8003bd6:	d87b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003bd8:	2b60      	cmp	r3, #96	; 0x60
 8003bda:	d050      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x116>
 8003bdc:	2b60      	cmp	r3, #96	; 0x60
 8003bde:	d877      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003be0:	2b50      	cmp	r3, #80	; 0x50
 8003be2:	d03c      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0xf6>
 8003be4:	2b50      	cmp	r3, #80	; 0x50
 8003be6:	d873      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d058      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x136>
 8003bec:	2b40      	cmp	r3, #64	; 0x40
 8003bee:	d86f      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003bf0:	2b30      	cmp	r3, #48	; 0x30
 8003bf2:	d064      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x156>
 8003bf4:	2b30      	cmp	r3, #48	; 0x30
 8003bf6:	d86b      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d060      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x156>
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d867      	bhi.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x156>
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d05a      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c08:	e062      	b.n	8003cd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6899      	ldr	r1, [r3, #8]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f000 f966 	bl	8003eea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	609a      	str	r2, [r3, #8]
      break;
 8003c36:	e04e      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	6899      	ldr	r1, [r3, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f000 f94f 	bl	8003eea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5a:	609a      	str	r2, [r3, #8]
      break;
 8003c5c:	e03b      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 f8c6 	bl	8003dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2150      	movs	r1, #80	; 0x50
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 f91d 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e02b      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 f8e4 	bl	8003e58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2160      	movs	r1, #96	; 0x60
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f90d 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e01b      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 f8a6 	bl	8003dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f8fd 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e00b      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f000 f8f4 	bl	8003eb6 <TIM_ITRx_SetConfig>
        break;
 8003cce:	e002      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bc80      	pop	{r7}
 8003d00:	4770      	bx	lr

08003d02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a29      	ldr	r2, [pc, #164]	; (8003df0 <TIM_Base_SetConfig+0xb8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d00b      	beq.n	8003d68 <TIM_Base_SetConfig+0x30>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d56:	d007      	beq.n	8003d68 <TIM_Base_SetConfig+0x30>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a26      	ldr	r2, [pc, #152]	; (8003df4 <TIM_Base_SetConfig+0xbc>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d003      	beq.n	8003d68 <TIM_Base_SetConfig+0x30>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <TIM_Base_SetConfig+0xc0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <TIM_Base_SetConfig+0xb8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <TIM_Base_SetConfig+0x62>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d88:	d007      	beq.n	8003d9a <TIM_Base_SetConfig+0x62>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <TIM_Base_SetConfig+0xbc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_Base_SetConfig+0x62>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <TIM_Base_SetConfig+0xc0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d108      	bne.n	8003dac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <TIM_Base_SetConfig+0xb8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d103      	bne.n	8003de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	615a      	str	r2, [r3, #20]
}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 030a 	bic.w	r3, r3, #10
 8003e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	f023 0210 	bic.w	r2, r3, #16
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	031b      	lsls	r3, r3, #12
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr

08003eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b087      	sub	sp, #28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	021a      	lsls	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	609a      	str	r2, [r3, #8]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e046      	b.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a12      	ldr	r2, [pc, #72]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	40012c00 	.word	0x40012c00
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800

08003fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr

08004008 <__errno>:
 8004008:	4b01      	ldr	r3, [pc, #4]	; (8004010 <__errno+0x8>)
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000018 	.word	0x20000018

08004014 <__libc_init_array>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	2600      	movs	r6, #0
 8004018:	4d0c      	ldr	r5, [pc, #48]	; (800404c <__libc_init_array+0x38>)
 800401a:	4c0d      	ldr	r4, [pc, #52]	; (8004050 <__libc_init_array+0x3c>)
 800401c:	1b64      	subs	r4, r4, r5
 800401e:	10a4      	asrs	r4, r4, #2
 8004020:	42a6      	cmp	r6, r4
 8004022:	d109      	bne.n	8004038 <__libc_init_array+0x24>
 8004024:	f000 fc5c 	bl	80048e0 <_init>
 8004028:	2600      	movs	r6, #0
 800402a:	4d0a      	ldr	r5, [pc, #40]	; (8004054 <__libc_init_array+0x40>)
 800402c:	4c0a      	ldr	r4, [pc, #40]	; (8004058 <__libc_init_array+0x44>)
 800402e:	1b64      	subs	r4, r4, r5
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	42a6      	cmp	r6, r4
 8004034:	d105      	bne.n	8004042 <__libc_init_array+0x2e>
 8004036:	bd70      	pop	{r4, r5, r6, pc}
 8004038:	f855 3b04 	ldr.w	r3, [r5], #4
 800403c:	4798      	blx	r3
 800403e:	3601      	adds	r6, #1
 8004040:	e7ee      	b.n	8004020 <__libc_init_array+0xc>
 8004042:	f855 3b04 	ldr.w	r3, [r5], #4
 8004046:	4798      	blx	r3
 8004048:	3601      	adds	r6, #1
 800404a:	e7f2      	b.n	8004032 <__libc_init_array+0x1e>
 800404c:	080050e8 	.word	0x080050e8
 8004050:	080050e8 	.word	0x080050e8
 8004054:	080050e8 	.word	0x080050e8
 8004058:	080050ec 	.word	0x080050ec

0800405c <memset>:
 800405c:	4603      	mov	r3, r0
 800405e:	4402      	add	r2, r0
 8004060:	4293      	cmp	r3, r2
 8004062:	d100      	bne.n	8004066 <memset+0xa>
 8004064:	4770      	bx	lr
 8004066:	f803 1b01 	strb.w	r1, [r3], #1
 800406a:	e7f9      	b.n	8004060 <memset+0x4>

0800406c <siprintf>:
 800406c:	b40e      	push	{r1, r2, r3}
 800406e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004072:	b500      	push	{lr}
 8004074:	b09c      	sub	sp, #112	; 0x70
 8004076:	ab1d      	add	r3, sp, #116	; 0x74
 8004078:	9002      	str	r0, [sp, #8]
 800407a:	9006      	str	r0, [sp, #24]
 800407c:	9107      	str	r1, [sp, #28]
 800407e:	9104      	str	r1, [sp, #16]
 8004080:	4808      	ldr	r0, [pc, #32]	; (80040a4 <siprintf+0x38>)
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <siprintf+0x3c>)
 8004084:	f853 2b04 	ldr.w	r2, [r3], #4
 8004088:	9105      	str	r1, [sp, #20]
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	a902      	add	r1, sp, #8
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	f000 f868 	bl	8004164 <_svfiprintf_r>
 8004094:	2200      	movs	r2, #0
 8004096:	9b02      	ldr	r3, [sp, #8]
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	b01c      	add	sp, #112	; 0x70
 800409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a0:	b003      	add	sp, #12
 80040a2:	4770      	bx	lr
 80040a4:	20000018 	.word	0x20000018
 80040a8:	ffff0208 	.word	0xffff0208

080040ac <__ssputs_r>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	688e      	ldr	r6, [r1, #8]
 80040b2:	4682      	mov	sl, r0
 80040b4:	429e      	cmp	r6, r3
 80040b6:	460c      	mov	r4, r1
 80040b8:	4690      	mov	r8, r2
 80040ba:	461f      	mov	r7, r3
 80040bc:	d838      	bhi.n	8004130 <__ssputs_r+0x84>
 80040be:	898a      	ldrh	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c4:	d032      	beq.n	800412c <__ssputs_r+0x80>
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	3301      	adds	r3, #1
 80040cc:	eba5 0901 	sub.w	r9, r5, r1
 80040d0:	6965      	ldr	r5, [r4, #20]
 80040d2:	444b      	add	r3, r9
 80040d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040dc:	106d      	asrs	r5, r5, #1
 80040de:	429d      	cmp	r5, r3
 80040e0:	bf38      	it	cc
 80040e2:	461d      	movcc	r5, r3
 80040e4:	0553      	lsls	r3, r2, #21
 80040e6:	d531      	bpl.n	800414c <__ssputs_r+0xa0>
 80040e8:	4629      	mov	r1, r5
 80040ea:	f000 fb53 	bl	8004794 <_malloc_r>
 80040ee:	4606      	mov	r6, r0
 80040f0:	b950      	cbnz	r0, 8004108 <__ssputs_r+0x5c>
 80040f2:	230c      	movs	r3, #12
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f8ca 3000 	str.w	r3, [sl]
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004102:	81a3      	strh	r3, [r4, #12]
 8004104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004108:	464a      	mov	r2, r9
 800410a:	6921      	ldr	r1, [r4, #16]
 800410c:	f000 face 	bl	80046ac <memcpy>
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	6126      	str	r6, [r4, #16]
 800411e:	444e      	add	r6, r9
 8004120:	6026      	str	r6, [r4, #0]
 8004122:	463e      	mov	r6, r7
 8004124:	6165      	str	r5, [r4, #20]
 8004126:	eba5 0509 	sub.w	r5, r5, r9
 800412a:	60a5      	str	r5, [r4, #8]
 800412c:	42be      	cmp	r6, r7
 800412e:	d900      	bls.n	8004132 <__ssputs_r+0x86>
 8004130:	463e      	mov	r6, r7
 8004132:	4632      	mov	r2, r6
 8004134:	4641      	mov	r1, r8
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	f000 fac6 	bl	80046c8 <memmove>
 800413c:	68a3      	ldr	r3, [r4, #8]
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	1b9b      	subs	r3, r3, r6
 8004142:	4432      	add	r2, r6
 8004144:	2000      	movs	r0, #0
 8004146:	60a3      	str	r3, [r4, #8]
 8004148:	6022      	str	r2, [r4, #0]
 800414a:	e7db      	b.n	8004104 <__ssputs_r+0x58>
 800414c:	462a      	mov	r2, r5
 800414e:	f000 fb7b 	bl	8004848 <_realloc_r>
 8004152:	4606      	mov	r6, r0
 8004154:	2800      	cmp	r0, #0
 8004156:	d1e1      	bne.n	800411c <__ssputs_r+0x70>
 8004158:	4650      	mov	r0, sl
 800415a:	6921      	ldr	r1, [r4, #16]
 800415c:	f000 face 	bl	80046fc <_free_r>
 8004160:	e7c7      	b.n	80040f2 <__ssputs_r+0x46>
	...

08004164 <_svfiprintf_r>:
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	4698      	mov	r8, r3
 800416a:	898b      	ldrh	r3, [r1, #12]
 800416c:	4607      	mov	r7, r0
 800416e:	061b      	lsls	r3, r3, #24
 8004170:	460d      	mov	r5, r1
 8004172:	4614      	mov	r4, r2
 8004174:	b09d      	sub	sp, #116	; 0x74
 8004176:	d50e      	bpl.n	8004196 <_svfiprintf_r+0x32>
 8004178:	690b      	ldr	r3, [r1, #16]
 800417a:	b963      	cbnz	r3, 8004196 <_svfiprintf_r+0x32>
 800417c:	2140      	movs	r1, #64	; 0x40
 800417e:	f000 fb09 	bl	8004794 <_malloc_r>
 8004182:	6028      	str	r0, [r5, #0]
 8004184:	6128      	str	r0, [r5, #16]
 8004186:	b920      	cbnz	r0, 8004192 <_svfiprintf_r+0x2e>
 8004188:	230c      	movs	r3, #12
 800418a:	603b      	str	r3, [r7, #0]
 800418c:	f04f 30ff 	mov.w	r0, #4294967295
 8004190:	e0d1      	b.n	8004336 <_svfiprintf_r+0x1d2>
 8004192:	2340      	movs	r3, #64	; 0x40
 8004194:	616b      	str	r3, [r5, #20]
 8004196:	2300      	movs	r3, #0
 8004198:	9309      	str	r3, [sp, #36]	; 0x24
 800419a:	2320      	movs	r3, #32
 800419c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a0:	2330      	movs	r3, #48	; 0x30
 80041a2:	f04f 0901 	mov.w	r9, #1
 80041a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004350 <_svfiprintf_r+0x1ec>
 80041ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b2:	4623      	mov	r3, r4
 80041b4:	469a      	mov	sl, r3
 80041b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041ba:	b10a      	cbz	r2, 80041c0 <_svfiprintf_r+0x5c>
 80041bc:	2a25      	cmp	r2, #37	; 0x25
 80041be:	d1f9      	bne.n	80041b4 <_svfiprintf_r+0x50>
 80041c0:	ebba 0b04 	subs.w	fp, sl, r4
 80041c4:	d00b      	beq.n	80041de <_svfiprintf_r+0x7a>
 80041c6:	465b      	mov	r3, fp
 80041c8:	4622      	mov	r2, r4
 80041ca:	4629      	mov	r1, r5
 80041cc:	4638      	mov	r0, r7
 80041ce:	f7ff ff6d 	bl	80040ac <__ssputs_r>
 80041d2:	3001      	adds	r0, #1
 80041d4:	f000 80aa 	beq.w	800432c <_svfiprintf_r+0x1c8>
 80041d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041da:	445a      	add	r2, fp
 80041dc:	9209      	str	r2, [sp, #36]	; 0x24
 80041de:	f89a 3000 	ldrb.w	r3, [sl]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 80a2 	beq.w	800432c <_svfiprintf_r+0x1c8>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295
 80041ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041f2:	f10a 0a01 	add.w	sl, sl, #1
 80041f6:	9304      	str	r3, [sp, #16]
 80041f8:	9307      	str	r3, [sp, #28]
 80041fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041fe:	931a      	str	r3, [sp, #104]	; 0x68
 8004200:	4654      	mov	r4, sl
 8004202:	2205      	movs	r2, #5
 8004204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004208:	4851      	ldr	r0, [pc, #324]	; (8004350 <_svfiprintf_r+0x1ec>)
 800420a:	f000 fa41 	bl	8004690 <memchr>
 800420e:	9a04      	ldr	r2, [sp, #16]
 8004210:	b9d8      	cbnz	r0, 800424a <_svfiprintf_r+0xe6>
 8004212:	06d0      	lsls	r0, r2, #27
 8004214:	bf44      	itt	mi
 8004216:	2320      	movmi	r3, #32
 8004218:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800421c:	0711      	lsls	r1, r2, #28
 800421e:	bf44      	itt	mi
 8004220:	232b      	movmi	r3, #43	; 0x2b
 8004222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004226:	f89a 3000 	ldrb.w	r3, [sl]
 800422a:	2b2a      	cmp	r3, #42	; 0x2a
 800422c:	d015      	beq.n	800425a <_svfiprintf_r+0xf6>
 800422e:	4654      	mov	r4, sl
 8004230:	2000      	movs	r0, #0
 8004232:	f04f 0c0a 	mov.w	ip, #10
 8004236:	9a07      	ldr	r2, [sp, #28]
 8004238:	4621      	mov	r1, r4
 800423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800423e:	3b30      	subs	r3, #48	; 0x30
 8004240:	2b09      	cmp	r3, #9
 8004242:	d94e      	bls.n	80042e2 <_svfiprintf_r+0x17e>
 8004244:	b1b0      	cbz	r0, 8004274 <_svfiprintf_r+0x110>
 8004246:	9207      	str	r2, [sp, #28]
 8004248:	e014      	b.n	8004274 <_svfiprintf_r+0x110>
 800424a:	eba0 0308 	sub.w	r3, r0, r8
 800424e:	fa09 f303 	lsl.w	r3, r9, r3
 8004252:	4313      	orrs	r3, r2
 8004254:	46a2      	mov	sl, r4
 8004256:	9304      	str	r3, [sp, #16]
 8004258:	e7d2      	b.n	8004200 <_svfiprintf_r+0x9c>
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	1d19      	adds	r1, r3, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	9103      	str	r1, [sp, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbb      	ittet	lt
 8004266:	425b      	neglt	r3, r3
 8004268:	f042 0202 	orrlt.w	r2, r2, #2
 800426c:	9307      	strge	r3, [sp, #28]
 800426e:	9307      	strlt	r3, [sp, #28]
 8004270:	bfb8      	it	lt
 8004272:	9204      	strlt	r2, [sp, #16]
 8004274:	7823      	ldrb	r3, [r4, #0]
 8004276:	2b2e      	cmp	r3, #46	; 0x2e
 8004278:	d10c      	bne.n	8004294 <_svfiprintf_r+0x130>
 800427a:	7863      	ldrb	r3, [r4, #1]
 800427c:	2b2a      	cmp	r3, #42	; 0x2a
 800427e:	d135      	bne.n	80042ec <_svfiprintf_r+0x188>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	3402      	adds	r4, #2
 8004284:	1d1a      	adds	r2, r3, #4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	9203      	str	r2, [sp, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004292:	9305      	str	r3, [sp, #20]
 8004294:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004360 <_svfiprintf_r+0x1fc>
 8004298:	2203      	movs	r2, #3
 800429a:	4650      	mov	r0, sl
 800429c:	7821      	ldrb	r1, [r4, #0]
 800429e:	f000 f9f7 	bl	8004690 <memchr>
 80042a2:	b140      	cbz	r0, 80042b6 <_svfiprintf_r+0x152>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	eba0 000a 	sub.w	r0, r0, sl
 80042aa:	fa03 f000 	lsl.w	r0, r3, r0
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	3401      	adds	r4, #1
 80042b2:	4303      	orrs	r3, r0
 80042b4:	9304      	str	r3, [sp, #16]
 80042b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ba:	2206      	movs	r2, #6
 80042bc:	4825      	ldr	r0, [pc, #148]	; (8004354 <_svfiprintf_r+0x1f0>)
 80042be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c2:	f000 f9e5 	bl	8004690 <memchr>
 80042c6:	2800      	cmp	r0, #0
 80042c8:	d038      	beq.n	800433c <_svfiprintf_r+0x1d8>
 80042ca:	4b23      	ldr	r3, [pc, #140]	; (8004358 <_svfiprintf_r+0x1f4>)
 80042cc:	bb1b      	cbnz	r3, 8004316 <_svfiprintf_r+0x1b2>
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	3307      	adds	r3, #7
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	3308      	adds	r3, #8
 80042d8:	9303      	str	r3, [sp, #12]
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	4433      	add	r3, r6
 80042de:	9309      	str	r3, [sp, #36]	; 0x24
 80042e0:	e767      	b.n	80041b2 <_svfiprintf_r+0x4e>
 80042e2:	460c      	mov	r4, r1
 80042e4:	2001      	movs	r0, #1
 80042e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ea:	e7a5      	b.n	8004238 <_svfiprintf_r+0xd4>
 80042ec:	2300      	movs	r3, #0
 80042ee:	f04f 0c0a 	mov.w	ip, #10
 80042f2:	4619      	mov	r1, r3
 80042f4:	3401      	adds	r4, #1
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	4620      	mov	r0, r4
 80042fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042fe:	3a30      	subs	r2, #48	; 0x30
 8004300:	2a09      	cmp	r2, #9
 8004302:	d903      	bls.n	800430c <_svfiprintf_r+0x1a8>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0c5      	beq.n	8004294 <_svfiprintf_r+0x130>
 8004308:	9105      	str	r1, [sp, #20]
 800430a:	e7c3      	b.n	8004294 <_svfiprintf_r+0x130>
 800430c:	4604      	mov	r4, r0
 800430e:	2301      	movs	r3, #1
 8004310:	fb0c 2101 	mla	r1, ip, r1, r2
 8004314:	e7f0      	b.n	80042f8 <_svfiprintf_r+0x194>
 8004316:	ab03      	add	r3, sp, #12
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	462a      	mov	r2, r5
 800431c:	4638      	mov	r0, r7
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <_svfiprintf_r+0x1f8>)
 8004320:	a904      	add	r1, sp, #16
 8004322:	f3af 8000 	nop.w
 8004326:	1c42      	adds	r2, r0, #1
 8004328:	4606      	mov	r6, r0
 800432a:	d1d6      	bne.n	80042da <_svfiprintf_r+0x176>
 800432c:	89ab      	ldrh	r3, [r5, #12]
 800432e:	065b      	lsls	r3, r3, #25
 8004330:	f53f af2c 	bmi.w	800418c <_svfiprintf_r+0x28>
 8004334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004336:	b01d      	add	sp, #116	; 0x74
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	ab03      	add	r3, sp, #12
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	462a      	mov	r2, r5
 8004342:	4638      	mov	r0, r7
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <_svfiprintf_r+0x1f8>)
 8004346:	a904      	add	r1, sp, #16
 8004348:	f000 f87c 	bl	8004444 <_printf_i>
 800434c:	e7eb      	b.n	8004326 <_svfiprintf_r+0x1c2>
 800434e:	bf00      	nop
 8004350:	080050b4 	.word	0x080050b4
 8004354:	080050be 	.word	0x080050be
 8004358:	00000000 	.word	0x00000000
 800435c:	080040ad 	.word	0x080040ad
 8004360:	080050ba 	.word	0x080050ba

08004364 <_printf_common>:
 8004364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004368:	4616      	mov	r6, r2
 800436a:	4699      	mov	r9, r3
 800436c:	688a      	ldr	r2, [r1, #8]
 800436e:	690b      	ldr	r3, [r1, #16]
 8004370:	4607      	mov	r7, r0
 8004372:	4293      	cmp	r3, r2
 8004374:	bfb8      	it	lt
 8004376:	4613      	movlt	r3, r2
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800437e:	460c      	mov	r4, r1
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	b10a      	cbz	r2, 800438a <_printf_common+0x26>
 8004386:	3301      	adds	r3, #1
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	0699      	lsls	r1, r3, #26
 800438e:	bf42      	ittt	mi
 8004390:	6833      	ldrmi	r3, [r6, #0]
 8004392:	3302      	addmi	r3, #2
 8004394:	6033      	strmi	r3, [r6, #0]
 8004396:	6825      	ldr	r5, [r4, #0]
 8004398:	f015 0506 	ands.w	r5, r5, #6
 800439c:	d106      	bne.n	80043ac <_printf_common+0x48>
 800439e:	f104 0a19 	add.w	sl, r4, #25
 80043a2:	68e3      	ldr	r3, [r4, #12]
 80043a4:	6832      	ldr	r2, [r6, #0]
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	dc28      	bgt.n	80043fe <_printf_common+0x9a>
 80043ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b0:	1e13      	subs	r3, r2, #0
 80043b2:	6822      	ldr	r2, [r4, #0]
 80043b4:	bf18      	it	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	0692      	lsls	r2, r2, #26
 80043ba:	d42d      	bmi.n	8004418 <_printf_common+0xb4>
 80043bc:	4649      	mov	r1, r9
 80043be:	4638      	mov	r0, r7
 80043c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c4:	47c0      	blx	r8
 80043c6:	3001      	adds	r0, #1
 80043c8:	d020      	beq.n	800440c <_printf_common+0xa8>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	68e5      	ldr	r5, [r4, #12]
 80043ce:	f003 0306 	and.w	r3, r3, #6
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	bf18      	it	ne
 80043d6:	2500      	movne	r5, #0
 80043d8:	6832      	ldr	r2, [r6, #0]
 80043da:	f04f 0600 	mov.w	r6, #0
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	bf08      	it	eq
 80043e2:	1aad      	subeq	r5, r5, r2
 80043e4:	6922      	ldr	r2, [r4, #16]
 80043e6:	bf08      	it	eq
 80043e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bfc4      	itt	gt
 80043f0:	1a9b      	subgt	r3, r3, r2
 80043f2:	18ed      	addgt	r5, r5, r3
 80043f4:	341a      	adds	r4, #26
 80043f6:	42b5      	cmp	r5, r6
 80043f8:	d11a      	bne.n	8004430 <_printf_common+0xcc>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e008      	b.n	8004410 <_printf_common+0xac>
 80043fe:	2301      	movs	r3, #1
 8004400:	4652      	mov	r2, sl
 8004402:	4649      	mov	r1, r9
 8004404:	4638      	mov	r0, r7
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d103      	bne.n	8004414 <_printf_common+0xb0>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	3501      	adds	r5, #1
 8004416:	e7c4      	b.n	80043a2 <_printf_common+0x3e>
 8004418:	2030      	movs	r0, #48	; 0x30
 800441a:	18e1      	adds	r1, r4, r3
 800441c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004426:	4422      	add	r2, r4
 8004428:	3302      	adds	r3, #2
 800442a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442e:	e7c5      	b.n	80043bc <_printf_common+0x58>
 8004430:	2301      	movs	r3, #1
 8004432:	4622      	mov	r2, r4
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d0e6      	beq.n	800440c <_printf_common+0xa8>
 800443e:	3601      	adds	r6, #1
 8004440:	e7d9      	b.n	80043f6 <_printf_common+0x92>
	...

08004444 <_printf_i>:
 8004444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	460c      	mov	r4, r1
 800444a:	7e27      	ldrb	r7, [r4, #24]
 800444c:	4691      	mov	r9, r2
 800444e:	2f78      	cmp	r7, #120	; 0x78
 8004450:	4680      	mov	r8, r0
 8004452:	469a      	mov	sl, r3
 8004454:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004456:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800445a:	d807      	bhi.n	800446c <_printf_i+0x28>
 800445c:	2f62      	cmp	r7, #98	; 0x62
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x32>
 8004460:	2f00      	cmp	r7, #0
 8004462:	f000 80d9 	beq.w	8004618 <_printf_i+0x1d4>
 8004466:	2f58      	cmp	r7, #88	; 0x58
 8004468:	f000 80a4 	beq.w	80045b4 <_printf_i+0x170>
 800446c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004474:	e03a      	b.n	80044ec <_printf_i+0xa8>
 8004476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800447a:	2b15      	cmp	r3, #21
 800447c:	d8f6      	bhi.n	800446c <_printf_i+0x28>
 800447e:	a001      	add	r0, pc, #4	; (adr r0, 8004484 <_printf_i+0x40>)
 8004480:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044f1 	.word	0x080044f1
 800448c:	0800446d 	.word	0x0800446d
 8004490:	0800446d 	.word	0x0800446d
 8004494:	0800446d 	.word	0x0800446d
 8004498:	0800446d 	.word	0x0800446d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800446d 	.word	0x0800446d
 80044a4:	0800446d 	.word	0x0800446d
 80044a8:	0800446d 	.word	0x0800446d
 80044ac:	0800446d 	.word	0x0800446d
 80044b0:	080045ff 	.word	0x080045ff
 80044b4:	08004521 	.word	0x08004521
 80044b8:	080045e1 	.word	0x080045e1
 80044bc:	0800446d 	.word	0x0800446d
 80044c0:	0800446d 	.word	0x0800446d
 80044c4:	08004621 	.word	0x08004621
 80044c8:	0800446d 	.word	0x0800446d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800446d 	.word	0x0800446d
 80044d4:	0800446d 	.word	0x0800446d
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	680b      	ldr	r3, [r1, #0]
 80044de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	600a      	str	r2, [r1, #0]
 80044e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0a4      	b.n	800463a <_printf_i+0x1f6>
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	6808      	ldr	r0, [r1, #0]
 80044f4:	062e      	lsls	r6, r5, #24
 80044f6:	f100 0304 	add.w	r3, r0, #4
 80044fa:	d50a      	bpl.n	8004512 <_printf_i+0xce>
 80044fc:	6805      	ldr	r5, [r0, #0]
 80044fe:	600b      	str	r3, [r1, #0]
 8004500:	2d00      	cmp	r5, #0
 8004502:	da03      	bge.n	800450c <_printf_i+0xc8>
 8004504:	232d      	movs	r3, #45	; 0x2d
 8004506:	426d      	negs	r5, r5
 8004508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450c:	230a      	movs	r3, #10
 800450e:	485e      	ldr	r0, [pc, #376]	; (8004688 <_printf_i+0x244>)
 8004510:	e019      	b.n	8004546 <_printf_i+0x102>
 8004512:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004516:	6805      	ldr	r5, [r0, #0]
 8004518:	600b      	str	r3, [r1, #0]
 800451a:	bf18      	it	ne
 800451c:	b22d      	sxthne	r5, r5
 800451e:	e7ef      	b.n	8004500 <_printf_i+0xbc>
 8004520:	680b      	ldr	r3, [r1, #0]
 8004522:	6825      	ldr	r5, [r4, #0]
 8004524:	1d18      	adds	r0, r3, #4
 8004526:	6008      	str	r0, [r1, #0]
 8004528:	0628      	lsls	r0, r5, #24
 800452a:	d501      	bpl.n	8004530 <_printf_i+0xec>
 800452c:	681d      	ldr	r5, [r3, #0]
 800452e:	e002      	b.n	8004536 <_printf_i+0xf2>
 8004530:	0669      	lsls	r1, r5, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0xe8>
 8004534:	881d      	ldrh	r5, [r3, #0]
 8004536:	2f6f      	cmp	r7, #111	; 0x6f
 8004538:	bf0c      	ite	eq
 800453a:	2308      	moveq	r3, #8
 800453c:	230a      	movne	r3, #10
 800453e:	4852      	ldr	r0, [pc, #328]	; (8004688 <_printf_i+0x244>)
 8004540:	2100      	movs	r1, #0
 8004542:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004546:	6866      	ldr	r6, [r4, #4]
 8004548:	2e00      	cmp	r6, #0
 800454a:	bfa8      	it	ge
 800454c:	6821      	ldrge	r1, [r4, #0]
 800454e:	60a6      	str	r6, [r4, #8]
 8004550:	bfa4      	itt	ge
 8004552:	f021 0104 	bicge.w	r1, r1, #4
 8004556:	6021      	strge	r1, [r4, #0]
 8004558:	b90d      	cbnz	r5, 800455e <_printf_i+0x11a>
 800455a:	2e00      	cmp	r6, #0
 800455c:	d04d      	beq.n	80045fa <_printf_i+0x1b6>
 800455e:	4616      	mov	r6, r2
 8004560:	fbb5 f1f3 	udiv	r1, r5, r3
 8004564:	fb03 5711 	mls	r7, r3, r1, r5
 8004568:	5dc7      	ldrb	r7, [r0, r7]
 800456a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800456e:	462f      	mov	r7, r5
 8004570:	42bb      	cmp	r3, r7
 8004572:	460d      	mov	r5, r1
 8004574:	d9f4      	bls.n	8004560 <_printf_i+0x11c>
 8004576:	2b08      	cmp	r3, #8
 8004578:	d10b      	bne.n	8004592 <_printf_i+0x14e>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	07df      	lsls	r7, r3, #31
 800457e:	d508      	bpl.n	8004592 <_printf_i+0x14e>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	6861      	ldr	r1, [r4, #4]
 8004584:	4299      	cmp	r1, r3
 8004586:	bfde      	ittt	le
 8004588:	2330      	movle	r3, #48	; 0x30
 800458a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800458e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004592:	1b92      	subs	r2, r2, r6
 8004594:	6122      	str	r2, [r4, #16]
 8004596:	464b      	mov	r3, r9
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f8cd a000 	str.w	sl, [sp]
 80045a0:	aa03      	add	r2, sp, #12
 80045a2:	f7ff fedf 	bl	8004364 <_printf_common>
 80045a6:	3001      	adds	r0, #1
 80045a8:	d14c      	bne.n	8004644 <_printf_i+0x200>
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	b004      	add	sp, #16
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	4834      	ldr	r0, [pc, #208]	; (8004688 <_printf_i+0x244>)
 80045b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045ba:	680e      	ldr	r6, [r1, #0]
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	f856 5b04 	ldr.w	r5, [r6], #4
 80045c2:	061f      	lsls	r7, r3, #24
 80045c4:	600e      	str	r6, [r1, #0]
 80045c6:	d514      	bpl.n	80045f2 <_printf_i+0x1ae>
 80045c8:	07d9      	lsls	r1, r3, #31
 80045ca:	bf44      	itt	mi
 80045cc:	f043 0320 	orrmi.w	r3, r3, #32
 80045d0:	6023      	strmi	r3, [r4, #0]
 80045d2:	b91d      	cbnz	r5, 80045dc <_printf_i+0x198>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	2310      	movs	r3, #16
 80045de:	e7af      	b.n	8004540 <_printf_i+0xfc>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	f043 0320 	orr.w	r3, r3, #32
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	2378      	movs	r3, #120	; 0x78
 80045ea:	4828      	ldr	r0, [pc, #160]	; (800468c <_printf_i+0x248>)
 80045ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045f0:	e7e3      	b.n	80045ba <_printf_i+0x176>
 80045f2:	065e      	lsls	r6, r3, #25
 80045f4:	bf48      	it	mi
 80045f6:	b2ad      	uxthmi	r5, r5
 80045f8:	e7e6      	b.n	80045c8 <_printf_i+0x184>
 80045fa:	4616      	mov	r6, r2
 80045fc:	e7bb      	b.n	8004576 <_printf_i+0x132>
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	6826      	ldr	r6, [r4, #0]
 8004602:	1d1d      	adds	r5, r3, #4
 8004604:	6960      	ldr	r0, [r4, #20]
 8004606:	600d      	str	r5, [r1, #0]
 8004608:	0635      	lsls	r5, r6, #24
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	d501      	bpl.n	8004612 <_printf_i+0x1ce>
 800460e:	6018      	str	r0, [r3, #0]
 8004610:	e002      	b.n	8004618 <_printf_i+0x1d4>
 8004612:	0671      	lsls	r1, r6, #25
 8004614:	d5fb      	bpl.n	800460e <_printf_i+0x1ca>
 8004616:	8018      	strh	r0, [r3, #0]
 8004618:	2300      	movs	r3, #0
 800461a:	4616      	mov	r6, r2
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	e7ba      	b.n	8004596 <_printf_i+0x152>
 8004620:	680b      	ldr	r3, [r1, #0]
 8004622:	1d1a      	adds	r2, r3, #4
 8004624:	600a      	str	r2, [r1, #0]
 8004626:	681e      	ldr	r6, [r3, #0]
 8004628:	2100      	movs	r1, #0
 800462a:	4630      	mov	r0, r6
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	f000 f82f 	bl	8004690 <memchr>
 8004632:	b108      	cbz	r0, 8004638 <_printf_i+0x1f4>
 8004634:	1b80      	subs	r0, r0, r6
 8004636:	6060      	str	r0, [r4, #4]
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	6123      	str	r3, [r4, #16]
 800463c:	2300      	movs	r3, #0
 800463e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004642:	e7a8      	b.n	8004596 <_printf_i+0x152>
 8004644:	4632      	mov	r2, r6
 8004646:	4649      	mov	r1, r9
 8004648:	4640      	mov	r0, r8
 800464a:	6923      	ldr	r3, [r4, #16]
 800464c:	47d0      	blx	sl
 800464e:	3001      	adds	r0, #1
 8004650:	d0ab      	beq.n	80045aa <_printf_i+0x166>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	079b      	lsls	r3, r3, #30
 8004656:	d413      	bmi.n	8004680 <_printf_i+0x23c>
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	9b03      	ldr	r3, [sp, #12]
 800465c:	4298      	cmp	r0, r3
 800465e:	bfb8      	it	lt
 8004660:	4618      	movlt	r0, r3
 8004662:	e7a4      	b.n	80045ae <_printf_i+0x16a>
 8004664:	2301      	movs	r3, #1
 8004666:	4632      	mov	r2, r6
 8004668:	4649      	mov	r1, r9
 800466a:	4640      	mov	r0, r8
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d09b      	beq.n	80045aa <_printf_i+0x166>
 8004672:	3501      	adds	r5, #1
 8004674:	68e3      	ldr	r3, [r4, #12]
 8004676:	9903      	ldr	r1, [sp, #12]
 8004678:	1a5b      	subs	r3, r3, r1
 800467a:	42ab      	cmp	r3, r5
 800467c:	dcf2      	bgt.n	8004664 <_printf_i+0x220>
 800467e:	e7eb      	b.n	8004658 <_printf_i+0x214>
 8004680:	2500      	movs	r5, #0
 8004682:	f104 0619 	add.w	r6, r4, #25
 8004686:	e7f5      	b.n	8004674 <_printf_i+0x230>
 8004688:	080050c5 	.word	0x080050c5
 800468c:	080050d6 	.word	0x080050d6

08004690 <memchr>:
 8004690:	4603      	mov	r3, r0
 8004692:	b510      	push	{r4, lr}
 8004694:	b2c9      	uxtb	r1, r1
 8004696:	4402      	add	r2, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	4618      	mov	r0, r3
 800469c:	d101      	bne.n	80046a2 <memchr+0x12>
 800469e:	2000      	movs	r0, #0
 80046a0:	e003      	b.n	80046aa <memchr+0x1a>
 80046a2:	7804      	ldrb	r4, [r0, #0]
 80046a4:	3301      	adds	r3, #1
 80046a6:	428c      	cmp	r4, r1
 80046a8:	d1f6      	bne.n	8004698 <memchr+0x8>
 80046aa:	bd10      	pop	{r4, pc}

080046ac <memcpy>:
 80046ac:	440a      	add	r2, r1
 80046ae:	4291      	cmp	r1, r2
 80046b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046b4:	d100      	bne.n	80046b8 <memcpy+0xc>
 80046b6:	4770      	bx	lr
 80046b8:	b510      	push	{r4, lr}
 80046ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046be:	4291      	cmp	r1, r2
 80046c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046c4:	d1f9      	bne.n	80046ba <memcpy+0xe>
 80046c6:	bd10      	pop	{r4, pc}

080046c8 <memmove>:
 80046c8:	4288      	cmp	r0, r1
 80046ca:	b510      	push	{r4, lr}
 80046cc:	eb01 0402 	add.w	r4, r1, r2
 80046d0:	d902      	bls.n	80046d8 <memmove+0x10>
 80046d2:	4284      	cmp	r4, r0
 80046d4:	4623      	mov	r3, r4
 80046d6:	d807      	bhi.n	80046e8 <memmove+0x20>
 80046d8:	1e43      	subs	r3, r0, #1
 80046da:	42a1      	cmp	r1, r4
 80046dc:	d008      	beq.n	80046f0 <memmove+0x28>
 80046de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046e6:	e7f8      	b.n	80046da <memmove+0x12>
 80046e8:	4601      	mov	r1, r0
 80046ea:	4402      	add	r2, r0
 80046ec:	428a      	cmp	r2, r1
 80046ee:	d100      	bne.n	80046f2 <memmove+0x2a>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046fa:	e7f7      	b.n	80046ec <memmove+0x24>

080046fc <_free_r>:
 80046fc:	b538      	push	{r3, r4, r5, lr}
 80046fe:	4605      	mov	r5, r0
 8004700:	2900      	cmp	r1, #0
 8004702:	d043      	beq.n	800478c <_free_r+0x90>
 8004704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004708:	1f0c      	subs	r4, r1, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	bfb8      	it	lt
 800470e:	18e4      	addlt	r4, r4, r3
 8004710:	f000 f8d0 	bl	80048b4 <__malloc_lock>
 8004714:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <_free_r+0x94>)
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	4610      	mov	r0, r2
 800471a:	b933      	cbnz	r3, 800472a <_free_r+0x2e>
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6014      	str	r4, [r2, #0]
 8004720:	4628      	mov	r0, r5
 8004722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004726:	f000 b8cb 	b.w	80048c0 <__malloc_unlock>
 800472a:	42a3      	cmp	r3, r4
 800472c:	d90a      	bls.n	8004744 <_free_r+0x48>
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	1862      	adds	r2, r4, r1
 8004732:	4293      	cmp	r3, r2
 8004734:	bf01      	itttt	eq
 8004736:	681a      	ldreq	r2, [r3, #0]
 8004738:	685b      	ldreq	r3, [r3, #4]
 800473a:	1852      	addeq	r2, r2, r1
 800473c:	6022      	streq	r2, [r4, #0]
 800473e:	6063      	str	r3, [r4, #4]
 8004740:	6004      	str	r4, [r0, #0]
 8004742:	e7ed      	b.n	8004720 <_free_r+0x24>
 8004744:	461a      	mov	r2, r3
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	b10b      	cbz	r3, 800474e <_free_r+0x52>
 800474a:	42a3      	cmp	r3, r4
 800474c:	d9fa      	bls.n	8004744 <_free_r+0x48>
 800474e:	6811      	ldr	r1, [r2, #0]
 8004750:	1850      	adds	r0, r2, r1
 8004752:	42a0      	cmp	r0, r4
 8004754:	d10b      	bne.n	800476e <_free_r+0x72>
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	4401      	add	r1, r0
 800475a:	1850      	adds	r0, r2, r1
 800475c:	4283      	cmp	r3, r0
 800475e:	6011      	str	r1, [r2, #0]
 8004760:	d1de      	bne.n	8004720 <_free_r+0x24>
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4401      	add	r1, r0
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	6053      	str	r3, [r2, #4]
 800476c:	e7d8      	b.n	8004720 <_free_r+0x24>
 800476e:	d902      	bls.n	8004776 <_free_r+0x7a>
 8004770:	230c      	movs	r3, #12
 8004772:	602b      	str	r3, [r5, #0]
 8004774:	e7d4      	b.n	8004720 <_free_r+0x24>
 8004776:	6820      	ldr	r0, [r4, #0]
 8004778:	1821      	adds	r1, r4, r0
 800477a:	428b      	cmp	r3, r1
 800477c:	bf01      	itttt	eq
 800477e:	6819      	ldreq	r1, [r3, #0]
 8004780:	685b      	ldreq	r3, [r3, #4]
 8004782:	1809      	addeq	r1, r1, r0
 8004784:	6021      	streq	r1, [r4, #0]
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	6054      	str	r4, [r2, #4]
 800478a:	e7c9      	b.n	8004720 <_free_r+0x24>
 800478c:	bd38      	pop	{r3, r4, r5, pc}
 800478e:	bf00      	nop
 8004790:	200004b0 	.word	0x200004b0

08004794 <_malloc_r>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	1ccd      	adds	r5, r1, #3
 8004798:	f025 0503 	bic.w	r5, r5, #3
 800479c:	3508      	adds	r5, #8
 800479e:	2d0c      	cmp	r5, #12
 80047a0:	bf38      	it	cc
 80047a2:	250c      	movcc	r5, #12
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	4606      	mov	r6, r0
 80047a8:	db01      	blt.n	80047ae <_malloc_r+0x1a>
 80047aa:	42a9      	cmp	r1, r5
 80047ac:	d903      	bls.n	80047b6 <_malloc_r+0x22>
 80047ae:	230c      	movs	r3, #12
 80047b0:	6033      	str	r3, [r6, #0]
 80047b2:	2000      	movs	r0, #0
 80047b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b6:	f000 f87d 	bl	80048b4 <__malloc_lock>
 80047ba:	4921      	ldr	r1, [pc, #132]	; (8004840 <_malloc_r+0xac>)
 80047bc:	680a      	ldr	r2, [r1, #0]
 80047be:	4614      	mov	r4, r2
 80047c0:	b99c      	cbnz	r4, 80047ea <_malloc_r+0x56>
 80047c2:	4f20      	ldr	r7, [pc, #128]	; (8004844 <_malloc_r+0xb0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b923      	cbnz	r3, 80047d2 <_malloc_r+0x3e>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 f862 	bl	8004894 <_sbrk_r>
 80047d0:	6038      	str	r0, [r7, #0]
 80047d2:	4629      	mov	r1, r5
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f85d 	bl	8004894 <_sbrk_r>
 80047da:	1c43      	adds	r3, r0, #1
 80047dc:	d123      	bne.n	8004826 <_malloc_r+0x92>
 80047de:	230c      	movs	r3, #12
 80047e0:	4630      	mov	r0, r6
 80047e2:	6033      	str	r3, [r6, #0]
 80047e4:	f000 f86c 	bl	80048c0 <__malloc_unlock>
 80047e8:	e7e3      	b.n	80047b2 <_malloc_r+0x1e>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	1b5b      	subs	r3, r3, r5
 80047ee:	d417      	bmi.n	8004820 <_malloc_r+0x8c>
 80047f0:	2b0b      	cmp	r3, #11
 80047f2:	d903      	bls.n	80047fc <_malloc_r+0x68>
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	441c      	add	r4, r3
 80047f8:	6025      	str	r5, [r4, #0]
 80047fa:	e004      	b.n	8004806 <_malloc_r+0x72>
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	42a2      	cmp	r2, r4
 8004800:	bf0c      	ite	eq
 8004802:	600b      	streq	r3, [r1, #0]
 8004804:	6053      	strne	r3, [r2, #4]
 8004806:	4630      	mov	r0, r6
 8004808:	f000 f85a 	bl	80048c0 <__malloc_unlock>
 800480c:	f104 000b 	add.w	r0, r4, #11
 8004810:	1d23      	adds	r3, r4, #4
 8004812:	f020 0007 	bic.w	r0, r0, #7
 8004816:	1ac2      	subs	r2, r0, r3
 8004818:	d0cc      	beq.n	80047b4 <_malloc_r+0x20>
 800481a:	1a1b      	subs	r3, r3, r0
 800481c:	50a3      	str	r3, [r4, r2]
 800481e:	e7c9      	b.n	80047b4 <_malloc_r+0x20>
 8004820:	4622      	mov	r2, r4
 8004822:	6864      	ldr	r4, [r4, #4]
 8004824:	e7cc      	b.n	80047c0 <_malloc_r+0x2c>
 8004826:	1cc4      	adds	r4, r0, #3
 8004828:	f024 0403 	bic.w	r4, r4, #3
 800482c:	42a0      	cmp	r0, r4
 800482e:	d0e3      	beq.n	80047f8 <_malloc_r+0x64>
 8004830:	1a21      	subs	r1, r4, r0
 8004832:	4630      	mov	r0, r6
 8004834:	f000 f82e 	bl	8004894 <_sbrk_r>
 8004838:	3001      	adds	r0, #1
 800483a:	d1dd      	bne.n	80047f8 <_malloc_r+0x64>
 800483c:	e7cf      	b.n	80047de <_malloc_r+0x4a>
 800483e:	bf00      	nop
 8004840:	200004b0 	.word	0x200004b0
 8004844:	200004b4 	.word	0x200004b4

08004848 <_realloc_r>:
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	4607      	mov	r7, r0
 800484c:	4614      	mov	r4, r2
 800484e:	460e      	mov	r6, r1
 8004850:	b921      	cbnz	r1, 800485c <_realloc_r+0x14>
 8004852:	4611      	mov	r1, r2
 8004854:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004858:	f7ff bf9c 	b.w	8004794 <_malloc_r>
 800485c:	b922      	cbnz	r2, 8004868 <_realloc_r+0x20>
 800485e:	f7ff ff4d 	bl	80046fc <_free_r>
 8004862:	4625      	mov	r5, r4
 8004864:	4628      	mov	r0, r5
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004868:	f000 f830 	bl	80048cc <_malloc_usable_size_r>
 800486c:	42a0      	cmp	r0, r4
 800486e:	d20f      	bcs.n	8004890 <_realloc_r+0x48>
 8004870:	4621      	mov	r1, r4
 8004872:	4638      	mov	r0, r7
 8004874:	f7ff ff8e 	bl	8004794 <_malloc_r>
 8004878:	4605      	mov	r5, r0
 800487a:	2800      	cmp	r0, #0
 800487c:	d0f2      	beq.n	8004864 <_realloc_r+0x1c>
 800487e:	4631      	mov	r1, r6
 8004880:	4622      	mov	r2, r4
 8004882:	f7ff ff13 	bl	80046ac <memcpy>
 8004886:	4631      	mov	r1, r6
 8004888:	4638      	mov	r0, r7
 800488a:	f7ff ff37 	bl	80046fc <_free_r>
 800488e:	e7e9      	b.n	8004864 <_realloc_r+0x1c>
 8004890:	4635      	mov	r5, r6
 8004892:	e7e7      	b.n	8004864 <_realloc_r+0x1c>

08004894 <_sbrk_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	2300      	movs	r3, #0
 8004898:	4d05      	ldr	r5, [pc, #20]	; (80048b0 <_sbrk_r+0x1c>)
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc fd3e 	bl	8001320 <_sbrk>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_sbrk_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_sbrk_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	200005f0 	.word	0x200005f0

080048b4 <__malloc_lock>:
 80048b4:	4801      	ldr	r0, [pc, #4]	; (80048bc <__malloc_lock+0x8>)
 80048b6:	f000 b811 	b.w	80048dc <__retarget_lock_acquire_recursive>
 80048ba:	bf00      	nop
 80048bc:	200005f8 	.word	0x200005f8

080048c0 <__malloc_unlock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	; (80048c8 <__malloc_unlock+0x8>)
 80048c2:	f000 b80c 	b.w	80048de <__retarget_lock_release_recursive>
 80048c6:	bf00      	nop
 80048c8:	200005f8 	.word	0x200005f8

080048cc <_malloc_usable_size_r>:
 80048cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d0:	1f18      	subs	r0, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bfbc      	itt	lt
 80048d6:	580b      	ldrlt	r3, [r1, r0]
 80048d8:	18c0      	addlt	r0, r0, r3
 80048da:	4770      	bx	lr

080048dc <__retarget_lock_acquire_recursive>:
 80048dc:	4770      	bx	lr

080048de <__retarget_lock_release_recursive>:
 80048de:	4770      	bx	lr

080048e0 <_init>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	bf00      	nop
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr

080048ec <_fini>:
 80048ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ee:	bf00      	nop
 80048f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f2:	bc08      	pop	{r3}
 80048f4:	469e      	mov	lr, r3
 80048f6:	4770      	bx	lr
